// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// IStakingSlashingDepositInfo is an auto generated low-level Go binding around an user-defined struct.
type IStakingSlashingDepositInfo struct {
	Pledgor common.Address
	PubKey  []byte
	Amount  *big.Int
}

// TssStakingSlashingMetaData contains all meta data concerning the TssStakingSlashing contract.
var TssStakingSlashingMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pledgor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structIStakingSlashing.DepositInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"AddDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumTssStakingSlashing.SlashType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"Slashing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BitToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"batchGetDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pledgor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structIStakingSlashing.DepositInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearQuitRequestList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pledgor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pledgor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structIStakingSlashing.DepositInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQuitRequestList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getSlashRecord\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlashingParams\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bitToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tssGroupContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"byteListA\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"byteListB\",\"type\":\"bytes\"}],\"name\":\"isEqual\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isJailed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quitRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quitRequestList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tssGroup\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_slashAmount\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_exIncome\",\"type\":\"uint256[2]\"}],\"name\":\"setSlashingParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slashAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_messageBytes\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"slashing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_pubKey\",\"type\":\"bytes\"}],\"name\":\"staking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tssGroupContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unJail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50613f48806100206000396000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c8063740efec3116100ee578063ca628c7811610097578063eb20b58911610071578063eb20b589146103b4578063f2bd7400146103d4578063f2fde38b146103e7578063fc7e286d146103fa57600080fd5b8063ca628c7814610379578063d323041d14610381578063de6fb88a146103a157600080fd5b80638da5cb5b116100c85780638da5cb5b1461032557806394f649dd14610343578063b3fc1cb21461036357600080fd5b8063740efec3146102b7578063793505c8146102bf578063829673ef146102df57600080fd5b8063490ab9d6116101505780635df6db491161012a5780635df6db49146102945780636eae5b11146102a7578063715018a6146102af57600080fd5b8063490ab9d61461023457806357b0f05f146102495780635887c33c1461028157600080fd5b80633b58524d116101815780633b58524d146101ed5780633f95043814610200578063485cc9551461022157600080fd5b8063111b8c02146101a857806314bfb527146101b257806334359808146101da575b600080fd5b6101b061041c565b005b6101c56101c03660046131d9565b610432565b60405190151581526020015b60405180910390f35b6101c56101e8366004613363565b610598565b6101b06101fb3660046133c7565b61065c565b61021361020e366004613400565b6106b7565b6040519081526020016101d1565b6101b061022f3660046133c7565b6106ce565b61023c6108bf565b6040516101d19190613419565b61025c610257366004613400565b61092e565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d1565b6101b061028f3660046134bc565b610965565b6101b06102a2366004613528565b610cb5565b6101b0611423565b6101b061167f565b6101b0611691565b6102d26102cd366004613574565b611a9a565b6040516101d191906136a0565b6101c56102ed366004613720565b6000918252609f6020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b60335473ffffffffffffffffffffffffffffffffffffffff1661025c565b6103566103513660046131d9565b611c71565b6040516101d19190613745565b61036b611d8e565b6040516101d192919061377b565b6101b0611e09565b60985461025c9073ffffffffffffffffffffffffffffffffffffffff1681565b6101b06103af3660046137a7565b6122c2565b60975461025c9073ffffffffffffffffffffffffffffffffffffffff1681565b6102136103e2366004613400565b6125a3565b6101b06103f53660046131d9565b6125b3565b61040d6104083660046131d9565b61266a565b6040516101d1939291906137dc565b61042461272c565b610430609a600061312c565b565b60985473ffffffffffffffffffffffffffffffffffffffff82811660009081526099602052604080822090517f54bbb9140000000000000000000000000000000000000000000000000000000081529193849316916354bbb9149161049f9160019091019060040161386e565b6000604051808303816000875af11580156104be573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526105049190810190613936565b805151909150604014610578576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f747373206d656d626572206e6f7420657869737400000000000000000000000060448201526064015b60405180910390fd5b600181604001516001811115610590576105906139fd565b149392505050565b600081518351146105ab57506000610656565b60005b8351811015610650578281815181106105c9576105c9613a2c565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191684828151811061060857610608613a2c565b01602001517fff00000000000000000000000000000000000000000000000000000000000000161461063e576000915050610656565b8061064881613a8a565b9150506105ae565b50600190505b92915050565b61066461272c565b6097805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560988054929093169116179055565b609d81600281106106c757600080fd5b0154905081565b600054610100900460ff16158080156106ee5750600054600160ff909116105b806107085750303b158015610708575060005460ff166001145b610794576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161056f565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156107f257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6107fa6127ad565b61080261284c565b6097805473ffffffffffffffffffffffffffffffffffffffff8086167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255609880549285169290911691909117905580156108ba57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6060609a80548060200260200160405190810160405280929190818152602001828054801561092457602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116108f9575b5050505050905090565b609a818154811061093e57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6002606554036109d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161056f565b600260655560006109e484860186613ad1565b90506109f38160200151610432565b15610a5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f746865206e6f646520616c7265616479206a61696c6564000000000000000000604482015260640161056f565b80516000908152609f602090815260408083208285015173ffffffffffffffffffffffffffffffffffffffff16845290915290205460ff1615610af9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f616c726561647920736c61736865640000000000000000000000000000000000604482015260640161056f565b80516000908152609f602090815260408083208285015173ffffffffffffffffffffffffffffffffffffffff908116855292529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556098549151911690633231a7f090610b749088908890613bdb565b6040519081900381207fffffffff0000000000000000000000000000000000000000000000000000000060e084901b168252610bb69187908790600401613c34565b6020604051808303816000875af1158015610bd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf99190613c57565b610c5f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f7369676e6572206e6f74207473732067726f757020707562206b657900000000604482015260640161056f565b610c68816128eb565b7f9453459a6e9fa2069f1490c99cec15646afa157300f218a7f7840b23d09dbd3e81602001518260600151604051610ca1929190613c79565b60405180910390a150506001606555505050565b600260655403610d21576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161056f565b600260655560005b6002811015610e65576000609b8260028110610d4757610d47613a2c565b015411610db0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f68617665206e6f74207365742074686520736c61736820616d6f756e74000000604482015260640161056f565b6000609d8260028110610dc557610dc5613a2c565b015411610e53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f68617665206e6f74207365742074686520657874726120696e636f6d6520616d60448201527f6f756e7400000000000000000000000000000000000000000000000000000000606482015260840161056f565b80610e5d81613a8a565b915050610d29565b5060008311610ed0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f696e76616c696420616d6f756e74000000000000000000000000000000000000604482015260640161056f565b609c5433600090815260996020526040902060020154610ef1908590613cda565b1015610f59576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f6e656564206465706f736974203e3d20736c617368416d6f756e740000000000604482015260640161056f565b3360009081526099602052604081206001018054610f769061381b565b905011156110c557336000908152609960205260409020600101805461105a9190610fa09061381b565b80601f0160208091040260200160405190810160405280929190818152602001828054610fcc9061381b565b80156110195780601f10610fee57610100808354040283529160200191611019565b820191906000526020600020905b815481529060010190602001808311610ffc57829003601f168201915b505050505083838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061059892505050565b6110c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f7075624b6579206e6f7420657175616c00000000000000000000000000000000604482015260640161056f565b61124b565b6098546040517f43ae656c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906343ae656c9061111d9085908590600401613ced565b6020604051808303816000875af115801561113c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111609190613d09565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f696e76616c6964207075624b6579000000000000000000000000000000000000604482015260640161056f565b336000908152609960205260409020600101611211828483613d74565b5033600081815260996020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690911790555b6097546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810185905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906064016020604051808303816000875af11580156112c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ec9190613c57565b611352576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f7472616e7366657220657263323020746f6b656e206661696c65640000000000604482015260640161056f565b3360009081526099602052604081206002018054859290611374908490613cda565b925050819055507f3183ac23cb0f1e36109abc28e6807d6282c166cb0a538cb5617024770fc738353360405180606001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602001869052604051611411929190613e8f565b60405180910390a15050600160655550565b60005b6002811015611562576000609b826002811061144457611444613a2c565b0154116114ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f68617665206e6f74207365742074686520736c61736820616d6f756e74000000604482015260640161056f565b6000609d82600281106114c2576114c2613a2c565b015411611550576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f68617665206e6f74207365742074686520657874726120696e636f6d6520616d60448201527f6f756e7400000000000000000000000000000000000000000000000000000000606482015260840161056f565b8061155a81613a8a565b915050611426565b50609c543360009081526099602052604090206002015410156115e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e73756666696369656e742062616c616e6365000000000000000000000000604482015260640161056f565b609854336000908152609960205260409081902090517f429ec49c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9092169163429ec49c9161164b9160019091019060040161386e565b600060405180830381600087803b15801561166557600080fd5b505af1158015611679573d6000803e3d6000fd5b50505050565b61168761272c565b6104306000612cc3565b6002606554036116fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161056f565b60026065819055336000908152609960205260409020015461177b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f646f206e6f742068617665206465706f73697400000000000000000000000000604482015260640161056f565b609854336000908152609960205260409081902090517f4866e2e000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90921691634866e2e0916117e59160019091019060040161386e565b6020604051808303816000875af1158015611804573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118289190613c57565b806118db5750609854336000908152609960205260409081902090517fbcbc5fc600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9092169163bcbc5fc6916118989160019091019060040161386e565b6020604051808303816000875af11580156118b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118db9190613c57565b611967576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f6e6f742061742074686520696e6163746976652067726f7570206f722061637460448201527f6976652067726f75700000000000000000000000000000000000000000000000606482015260840161056f565b60005b609a54811015611a39573373ffffffffffffffffffffffffffffffffffffffff16609a828154811061199e5761199e613a2c565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1603611a27576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f616c726561647920696e2071756974526571756573744c697374000000000000604482015260640161056f565b80611a3181613a8a565b91505061196a565b50609a8054600181810183556000929092527f44da158ba27f9252712a74ff6a55c5d531f69609f1f6e7f17c4443a8e2089be40180547fffffffffffffffffffffffff00000000000000000000000000000000000000001633179055606555565b606060008267ffffffffffffffff811115611ab757611ab76131fd565b604051908082528060200260200182016040528015611b2257816020015b611b0f6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600081525090565b815260200190600190039081611ad55790505b50905060005b83811015611c695760996000868684818110611b4657611b46613a2c565b9050602002016020810190611b5b91906131d9565b73ffffffffffffffffffffffffffffffffffffffff90811682526020808301939093526040918201600020825160608101909352805490911682526001810180549293919291840191611bad9061381b565b80601f0160208091040260200160405190810160405280929190818152602001828054611bd99061381b565b8015611c265780601f10611bfb57610100808354040283529160200191611c26565b820191906000526020600020905b815481529060010190602001808311611c0957829003601f168201915b50505050508152602001600282015481525050828281518110611c4b57611c4b613a2c565b60200260200101819052508080611c6190613a8a565b915050611b28565b509392505050565b611cab6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600081525090565b73ffffffffffffffffffffffffffffffffffffffff8083166000908152609960209081526040918290208251606081019093528054909316825260018301805492939291840191611cfb9061381b565b80601f0160208091040260200160405190810160405280929190818152602001828054611d279061381b565b8015611d745780601f10611d4957610100808354040283529160200191611d74565b820191906000526020600020905b815481529060010190602001808311611d5757829003601f168201915b505050505081526020016002820154815250509050919050565b611d9661314a565b611d9e61314a565b6040805180820191829052609b91609d9190839060029082845b815481526020019060010190808311611db8575050604080518082019182905294965085935060029250905082845b815481526020019060010190808311611de75750505050509050915091509091565b600260655403611e75576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161056f565b60026065819055336000908152609960205260409020015480611ef4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f646f206e6f742068617665206465706f73697400000000000000000000000000604482015260640161056f565b3360009081526099602052604081206001018054611f119061381b565b80601f0160208091040260200160405190810160405280929190818152602001828054611f3d9061381b565b8015611f8a5780601f10611f5f57610100808354040283529160200191611f8a565b820191906000526020600020905b815481529060010190602001808311611f6d57829003601f168201915b50506098546040517f4866e2e000000000000000000000000000000000000000000000000000000000815294955073ffffffffffffffffffffffffffffffffffffffff1693634866e2e09350611fe69250859150600401613ebe565b6020604051808303816000875af1158015612005573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120299190613c57565b1580156120cc57506098546040517fbcbc5fc600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063bcbc5fc690612087908490600401613ebe565b6020604051808303816000875af11580156120a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ca9190613c57565b155b612132576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6e6f74206174207468652072696768742074696d650000000000000000000000604482015260640161056f565b33600090815260996020526040812080547fffffffffffffffffffffffff0000000000000000000000000000000000000000168155906121756001830182613168565b506000600291909101556097546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810184905273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb906044016020604051808303816000875af11580156121f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221a9190613c57565b612280576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6572633230207472616e73666572206661696c65640000000000000000000000604482015260640161056f565b60408051338152602081018490527f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364910160405180910390a150506001606555565b6122ca61272c565b813560208301351161235e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f696e76616c696420706172616d20736c617368416d6f756e742c20616e696d7560448201527f73203c3d20757074696d65000000000000000000000000000000000000000000606482015260840161056f565b80356020820135116123f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f696e76616c696420706172616d206578496e636f6d652c20616e696d7573203c60448201527f3d20757074696d65000000000000000000000000000000000000000000000000606482015260840161056f565b60005b60028110156108ba57600082826002811061241257612412613a2c565b60200201351161247e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f696e76616c696420616d6f756e74000000000000000000000000000000000000604482015260640161056f565b81816002811061249057612490613a2c565b60200201358382600281106124a7576124a7613a2c565b602002013511612539576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f736c617368416d6f756e74206e65656420626967676572207468616e2065784960448201527f6e636f6d65000000000000000000000000000000000000000000000000000000606482015260840161056f565b82816002811061254b5761254b613a2c565b6020020135609b826002811061256357612563613a2c565b015581816002811061257757612577613a2c565b6020020135609d826002811061258f5761258f613a2c565b01558061259b81613a8a565b9150506123f5565b609b81600281106106c757600080fd5b6125bb61272c565b73ffffffffffffffffffffffffffffffffffffffff811661265e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161056f565b61266781612cc3565b50565b6099602052600090815260409020805460018201805473ffffffffffffffffffffffffffffffffffffffff90921692916126a39061381b565b80601f01602080910402602001604051908101604052809291908181526020018280546126cf9061381b565b801561271c5780601f106126f15761010080835404028352916020019161271c565b820191906000526020600020905b8154815290600101906020018083116126ff57829003601f168201915b5050505050908060020154905083565b60335473ffffffffffffffffffffffffffffffffffffffff163314610430576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161056f565b600054610100900460ff16612844576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161056f565b610430612d3a565b600054610100900460ff166128e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161056f565b610430612dda565b60005b6002811015612a2a576000609b826002811061290c5761290c613a2c565b015411612975576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f68617665206e6f74207365742074686520736c61736820616d6f756e74000000604482015260640161056f565b6000609d826002811061298a5761298a613a2c565b015411612a18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f68617665206e6f74207365742074686520657874726120696e636f6d6520616d60448201527f6f756e7400000000000000000000000000000000000000000000000000000000606482015260840161056f565b80612a2281613a8a565b9150506128ee565b5060208082015173ffffffffffffffffffffffffffffffffffffffff1660009081526099909152604081206001018054612a639061381b565b80601f0160208091040260200160405190810160405280929190818152602001828054612a8f9061381b565b8015612adc5780601f10612ab157610100808354040283529160200191612adc565b820191906000526020600020905b815481529060010190602001808311612abf57829003601f168201915b5093945060019350612aed92505050565b82606001516002811115612b0357612b036139fd565b03612ba8576098546040517f254ff98100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063254ff98190612b5e908490600401613ebe565b600060405180830381600087803b158015612b7857600080fd5b505af1158015612b8c573d6000803e3d6000fd5b50505050612ba4826020015160008460400151612e78565b5050565b600282606001516002811115612bc057612bc06139fd565b03612c61576098546040517f7a952c1100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690637a952c1190612c1b908490600401613ebe565b600060405180830381600087803b158015612c3557600080fd5b505af1158015612c49573d6000803e3d6000fd5b50505050612ba4826020015160018460400151612e78565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f657272207479706520666f7220736c617368696e670000000000000000000000604482015260640161056f565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16612dd1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161056f565b61043033612cc3565b600054610100900460ff16612e71576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161056f565b6001606555565b60008080808080609b8860028110612e9257612e92613a2c565b015473ffffffffffffffffffffffffffffffffffffffff8a166000908152609960205260409020600201541015612f25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f646f206e6f74206861766520656e6f75676874206465706f7369740000000000604482015260640161056f565b609b8860028110612f3857612f38613a2c565b01549550609d8860028110612f4f57612f4f613a2c565b015473ffffffffffffffffffffffffffffffffffffffff8a16600090815260996020526040812060020180549293508892909190612f8e908490613ed1565b90915550612f9e90508187613ed1565b9350865184612fad9190613f13565b8751909350612fbc8486613ed1565b612fc69190613f27565b9150612fd28382613cda565b3360009081526099602052604081206002018054909190612ff4908490613cda565b90915550839050609d896002811061300e5761300e613a2c565b015461301a9190613cda565b945060005b87518110156130b7576130328387613cda565b955082609960008a848151811061304b5761304b613a2c565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201600082825461309f9190613cda565b909155508190506130af81613a8a565b91505061301f565b50858514613121576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f70616e69632c2063616c63756c6174696f6e206572726f720000000000000000604482015260640161056f565b505050505050505050565b5080546000825590600052602060002090810190612667919061319e565b60405180604001604052806002906020820280368337509192915050565b5080546131749061381b565b6000825580601f10613184575050565b601f01602090049060005260206000209081019061266791905b5b808211156131b3576000815560010161319f565b5090565b73ffffffffffffffffffffffffffffffffffffffff8116811461266757600080fd5b6000602082840312156131eb57600080fd5b81356131f6816131b7565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561324f5761324f6131fd565b60405290565b6040516080810167ffffffffffffffff8111828210171561324f5761324f6131fd565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156132bf576132bf6131fd565b604052919050565b600067ffffffffffffffff8211156132e1576132e16131fd565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261331e57600080fd5b813561333161332c826132c7565b613278565b81815284602083860101111561334657600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561337657600080fd5b823567ffffffffffffffff8082111561338e57600080fd5b61339a8683870161330d565b935060208501359150808211156133b057600080fd5b506133bd8582860161330d565b9150509250929050565b600080604083850312156133da57600080fd5b82356133e5816131b7565b915060208301356133f5816131b7565b809150509250929050565b60006020828403121561341257600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561346757835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101613435565b50909695505050505050565b60008083601f84011261348557600080fd5b50813567ffffffffffffffff81111561349d57600080fd5b6020830191508360208285010111156134b557600080fd5b9250929050565b600080600080604085870312156134d257600080fd5b843567ffffffffffffffff808211156134ea57600080fd5b6134f688838901613473565b9096509450602087013591508082111561350f57600080fd5b5061351c87828801613473565b95989497509550505050565b60008060006040848603121561353d57600080fd5b83359250602084013567ffffffffffffffff81111561355b57600080fd5b61356786828701613473565b9497909650939450505050565b6000806020838503121561358757600080fd5b823567ffffffffffffffff8082111561359f57600080fd5b818501915085601f8301126135b357600080fd5b8135818111156135c257600080fd5b8660208260051b85010111156135d757600080fd5b60209290920196919550909350505050565b60005b838110156136045781810151838201526020016135ec565b50506000910152565b600081518084526136258160208601602086016135e9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff8151168252600060208201516060602085015261368c606085018261360d565b604093840151949093019390935250919050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015613713577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452613701858351613657565b945092850192908501906001016136c7565b5092979650505050505050565b6000806040838503121561373357600080fd5b8235915060208301356133f5816131b7565b6020815260006131f66020830184613657565b8060005b600281101561167957815184526020938401939091019060010161375c565b608081016137898285613758565b6131f66040830184613758565b806040810183101561065657600080fd5b600080608083850312156137ba57600080fd5b6137c48484613796565b91506137d38460408501613796565b90509250929050565b73ffffffffffffffffffffffffffffffffffffffff8416815260606020820152600061380b606083018561360d565b9050826040830152949350505050565b600181811c9082168061382f57607f821691505b602082108103613868577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60006020808352600084546138828161381b565b808487015260406001808416600081146138a357600181146138db57613909565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008516838a01528284151560051b8a01019550613909565b896000528660002060005b858110156139015781548b82018601529083019088016138e6565b8a0184019650505b509398975050505050505050565b8051613922816131b7565b919050565b80516002811061392257600080fd5b6000602080838503121561394957600080fd5b825167ffffffffffffffff8082111561396157600080fd5b908401906060828703121561397557600080fd5b61397d61322c565b82518281111561398c57600080fd5b83019150601f8201871361399f57600080fd5b81516139ad61332c826132c7565b81815288868386010111156139c157600080fd5b6139d0828783018887016135e9565b8252506139de838501613917565b848201526139ee60408401613927565b60408201529695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613abb57613abb613a5b565b5060010190565b80356003811061392257600080fd5b60006020808385031215613ae457600080fd5b823567ffffffffffffffff80821115613afc57600080fd5b9084019060808287031215613b1057600080fd5b613b18613255565b8235815283830135613b29816131b7565b81850152604083013582811115613b3f57600080fd5b8301601f81018813613b5057600080fd5b803583811115613b6257613b626131fd565b8060051b9350613b73868501613278565b818152938201860193868101908a861115613b8d57600080fd5b928701925b85841015613bb75783359250613ba7836131b7565b8282529287019290870190613b92565b604085015250613bcc91505060608401613ac2565b60608201529695505050505050565b8183823760009101908152919050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b838152604060208201526000613c4e604083018486613beb565b95945050505050565b600060208284031215613c6957600080fd5b815180151581146131f657600080fd5b73ffffffffffffffffffffffffffffffffffffffff831681526040810160038310613ccd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8260208301529392505050565b8082018082111561065657610656613a5b565b602081526000613d01602083018486613beb565b949350505050565b600060208284031215613d1b57600080fd5b81516131f6816131b7565b601f8211156108ba57600081815260208120601f850160051c81016020861015613d4d5750805b601f850160051c820191505b81811015613d6c57828155600101613d59565b505050505050565b67ffffffffffffffff831115613d8c57613d8c6131fd565b613da083613d9a835461381b565b83613d26565b6000601f841160018114613df25760008515613dbc5750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355613e88565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b82811015613e415786850135825560209485019460019092019101613e21565b5086821015613e7c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b73ffffffffffffffffffffffffffffffffffffffff83168152604060208201526000613d016040830184613657565b6020815260006131f6602083018461360d565b8181038181111561065657610656613a5b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082613f2257613f22613ee4565b500690565b600082613f3657613f36613ee4565b50049056fea164736f6c6343000812000a",
}

// TssStakingSlashingABI is the input ABI used to generate the binding from.
// Deprecated: Use TssStakingSlashingMetaData.ABI instead.
var TssStakingSlashingABI = TssStakingSlashingMetaData.ABI

// TssStakingSlashingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TssStakingSlashingMetaData.Bin instead.
var TssStakingSlashingBin = TssStakingSlashingMetaData.Bin

// DeployTssStakingSlashing deploys a new Ethereum contract, binding an instance of TssStakingSlashing to it.
func DeployTssStakingSlashing(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TssStakingSlashing, error) {
	parsed, err := TssStakingSlashingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TssStakingSlashingBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TssStakingSlashing{TssStakingSlashingCaller: TssStakingSlashingCaller{contract: contract}, TssStakingSlashingTransactor: TssStakingSlashingTransactor{contract: contract}, TssStakingSlashingFilterer: TssStakingSlashingFilterer{contract: contract}}, nil
}

// TssStakingSlashing is an auto generated Go binding around an Ethereum contract.
type TssStakingSlashing struct {
	TssStakingSlashingCaller     // Read-only binding to the contract
	TssStakingSlashingTransactor // Write-only binding to the contract
	TssStakingSlashingFilterer   // Log filterer for contract events
}

// TssStakingSlashingCaller is an auto generated read-only Go binding around an Ethereum contract.
type TssStakingSlashingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TssStakingSlashingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TssStakingSlashingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TssStakingSlashingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TssStakingSlashingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TssStakingSlashingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TssStakingSlashingSession struct {
	Contract     *TssStakingSlashing // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// TssStakingSlashingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TssStakingSlashingCallerSession struct {
	Contract *TssStakingSlashingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// TssStakingSlashingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TssStakingSlashingTransactorSession struct {
	Contract     *TssStakingSlashingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// TssStakingSlashingRaw is an auto generated low-level Go binding around an Ethereum contract.
type TssStakingSlashingRaw struct {
	Contract *TssStakingSlashing // Generic contract binding to access the raw methods on
}

// TssStakingSlashingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TssStakingSlashingCallerRaw struct {
	Contract *TssStakingSlashingCaller // Generic read-only contract binding to access the raw methods on
}

// TssStakingSlashingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TssStakingSlashingTransactorRaw struct {
	Contract *TssStakingSlashingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTssStakingSlashing creates a new instance of TssStakingSlashing, bound to a specific deployed contract.
func NewTssStakingSlashing(address common.Address, backend bind.ContractBackend) (*TssStakingSlashing, error) {
	contract, err := bindTssStakingSlashing(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashing{TssStakingSlashingCaller: TssStakingSlashingCaller{contract: contract}, TssStakingSlashingTransactor: TssStakingSlashingTransactor{contract: contract}, TssStakingSlashingFilterer: TssStakingSlashingFilterer{contract: contract}}, nil
}

// NewTssStakingSlashingCaller creates a new read-only instance of TssStakingSlashing, bound to a specific deployed contract.
func NewTssStakingSlashingCaller(address common.Address, caller bind.ContractCaller) (*TssStakingSlashingCaller, error) {
	contract, err := bindTssStakingSlashing(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingCaller{contract: contract}, nil
}

// NewTssStakingSlashingTransactor creates a new write-only instance of TssStakingSlashing, bound to a specific deployed contract.
func NewTssStakingSlashingTransactor(address common.Address, transactor bind.ContractTransactor) (*TssStakingSlashingTransactor, error) {
	contract, err := bindTssStakingSlashing(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingTransactor{contract: contract}, nil
}

// NewTssStakingSlashingFilterer creates a new log filterer instance of TssStakingSlashing, bound to a specific deployed contract.
func NewTssStakingSlashingFilterer(address common.Address, filterer bind.ContractFilterer) (*TssStakingSlashingFilterer, error) {
	contract, err := bindTssStakingSlashing(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingFilterer{contract: contract}, nil
}

// bindTssStakingSlashing binds a generic wrapper to an already deployed contract.
func bindTssStakingSlashing(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TssStakingSlashingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TssStakingSlashing *TssStakingSlashingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TssStakingSlashing.Contract.TssStakingSlashingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TssStakingSlashing *TssStakingSlashingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.TssStakingSlashingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TssStakingSlashing *TssStakingSlashingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.TssStakingSlashingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TssStakingSlashing *TssStakingSlashingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TssStakingSlashing.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TssStakingSlashing *TssStakingSlashingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TssStakingSlashing *TssStakingSlashingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.contract.Transact(opts, method, params...)
}

// BitToken is a free data retrieval call binding the contract method 0xeb20b589.
//
// Solidity: function BitToken() view returns(address)
func (_TssStakingSlashing *TssStakingSlashingCaller) BitToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "BitToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BitToken is a free data retrieval call binding the contract method 0xeb20b589.
//
// Solidity: function BitToken() view returns(address)
func (_TssStakingSlashing *TssStakingSlashingSession) BitToken() (common.Address, error) {
	return _TssStakingSlashing.Contract.BitToken(&_TssStakingSlashing.CallOpts)
}

// BitToken is a free data retrieval call binding the contract method 0xeb20b589.
//
// Solidity: function BitToken() view returns(address)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) BitToken() (common.Address, error) {
	return _TssStakingSlashing.Contract.BitToken(&_TssStakingSlashing.CallOpts)
}

// BatchGetDeposits is a free data retrieval call binding the contract method 0x793505c8.
//
// Solidity: function batchGetDeposits(address[] users) view returns((address,bytes,uint256)[])
func (_TssStakingSlashing *TssStakingSlashingCaller) BatchGetDeposits(opts *bind.CallOpts, users []common.Address) ([]IStakingSlashingDepositInfo, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "batchGetDeposits", users)

	if err != nil {
		return *new([]IStakingSlashingDepositInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]IStakingSlashingDepositInfo)).(*[]IStakingSlashingDepositInfo)

	return out0, err

}

// BatchGetDeposits is a free data retrieval call binding the contract method 0x793505c8.
//
// Solidity: function batchGetDeposits(address[] users) view returns((address,bytes,uint256)[])
func (_TssStakingSlashing *TssStakingSlashingSession) BatchGetDeposits(users []common.Address) ([]IStakingSlashingDepositInfo, error) {
	return _TssStakingSlashing.Contract.BatchGetDeposits(&_TssStakingSlashing.CallOpts, users)
}

// BatchGetDeposits is a free data retrieval call binding the contract method 0x793505c8.
//
// Solidity: function batchGetDeposits(address[] users) view returns((address,bytes,uint256)[])
func (_TssStakingSlashing *TssStakingSlashingCallerSession) BatchGetDeposits(users []common.Address) ([]IStakingSlashingDepositInfo, error) {
	return _TssStakingSlashing.Contract.BatchGetDeposits(&_TssStakingSlashing.CallOpts, users)
}

// Deposits is a free data retrieval call binding the contract method 0xfc7e286d.
//
// Solidity: function deposits(address ) view returns(address pledgor, bytes pubKey, uint256 amount)
func (_TssStakingSlashing *TssStakingSlashingCaller) Deposits(opts *bind.CallOpts, arg0 common.Address) (struct {
	Pledgor common.Address
	PubKey  []byte
	Amount  *big.Int
}, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "deposits", arg0)

	outstruct := new(struct {
		Pledgor common.Address
		PubKey  []byte
		Amount  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Pledgor = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.PubKey = *abi.ConvertType(out[1], new([]byte)).(*[]byte)
	outstruct.Amount = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Deposits is a free data retrieval call binding the contract method 0xfc7e286d.
//
// Solidity: function deposits(address ) view returns(address pledgor, bytes pubKey, uint256 amount)
func (_TssStakingSlashing *TssStakingSlashingSession) Deposits(arg0 common.Address) (struct {
	Pledgor common.Address
	PubKey  []byte
	Amount  *big.Int
}, error) {
	return _TssStakingSlashing.Contract.Deposits(&_TssStakingSlashing.CallOpts, arg0)
}

// Deposits is a free data retrieval call binding the contract method 0xfc7e286d.
//
// Solidity: function deposits(address ) view returns(address pledgor, bytes pubKey, uint256 amount)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) Deposits(arg0 common.Address) (struct {
	Pledgor common.Address
	PubKey  []byte
	Amount  *big.Int
}, error) {
	return _TssStakingSlashing.Contract.Deposits(&_TssStakingSlashing.CallOpts, arg0)
}

// ExIncome is a free data retrieval call binding the contract method 0x3f950438.
//
// Solidity: function exIncome(uint256 ) view returns(uint256)
func (_TssStakingSlashing *TssStakingSlashingCaller) ExIncome(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "exIncome", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ExIncome is a free data retrieval call binding the contract method 0x3f950438.
//
// Solidity: function exIncome(uint256 ) view returns(uint256)
func (_TssStakingSlashing *TssStakingSlashingSession) ExIncome(arg0 *big.Int) (*big.Int, error) {
	return _TssStakingSlashing.Contract.ExIncome(&_TssStakingSlashing.CallOpts, arg0)
}

// ExIncome is a free data retrieval call binding the contract method 0x3f950438.
//
// Solidity: function exIncome(uint256 ) view returns(uint256)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) ExIncome(arg0 *big.Int) (*big.Int, error) {
	return _TssStakingSlashing.Contract.ExIncome(&_TssStakingSlashing.CallOpts, arg0)
}

// GetDeposits is a free data retrieval call binding the contract method 0x94f649dd.
//
// Solidity: function getDeposits(address user) view returns((address,bytes,uint256))
func (_TssStakingSlashing *TssStakingSlashingCaller) GetDeposits(opts *bind.CallOpts, user common.Address) (IStakingSlashingDepositInfo, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "getDeposits", user)

	if err != nil {
		return *new(IStakingSlashingDepositInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(IStakingSlashingDepositInfo)).(*IStakingSlashingDepositInfo)

	return out0, err

}

// GetDeposits is a free data retrieval call binding the contract method 0x94f649dd.
//
// Solidity: function getDeposits(address user) view returns((address,bytes,uint256))
func (_TssStakingSlashing *TssStakingSlashingSession) GetDeposits(user common.Address) (IStakingSlashingDepositInfo, error) {
	return _TssStakingSlashing.Contract.GetDeposits(&_TssStakingSlashing.CallOpts, user)
}

// GetDeposits is a free data retrieval call binding the contract method 0x94f649dd.
//
// Solidity: function getDeposits(address user) view returns((address,bytes,uint256))
func (_TssStakingSlashing *TssStakingSlashingCallerSession) GetDeposits(user common.Address) (IStakingSlashingDepositInfo, error) {
	return _TssStakingSlashing.Contract.GetDeposits(&_TssStakingSlashing.CallOpts, user)
}

// GetQuitRequestList is a free data retrieval call binding the contract method 0x490ab9d6.
//
// Solidity: function getQuitRequestList() view returns(address[])
func (_TssStakingSlashing *TssStakingSlashingCaller) GetQuitRequestList(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "getQuitRequestList")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetQuitRequestList is a free data retrieval call binding the contract method 0x490ab9d6.
//
// Solidity: function getQuitRequestList() view returns(address[])
func (_TssStakingSlashing *TssStakingSlashingSession) GetQuitRequestList() ([]common.Address, error) {
	return _TssStakingSlashing.Contract.GetQuitRequestList(&_TssStakingSlashing.CallOpts)
}

// GetQuitRequestList is a free data retrieval call binding the contract method 0x490ab9d6.
//
// Solidity: function getQuitRequestList() view returns(address[])
func (_TssStakingSlashing *TssStakingSlashingCallerSession) GetQuitRequestList() ([]common.Address, error) {
	return _TssStakingSlashing.Contract.GetQuitRequestList(&_TssStakingSlashing.CallOpts)
}

// GetSlashRecord is a free data retrieval call binding the contract method 0x829673ef.
//
// Solidity: function getSlashRecord(uint256 batchIndex, address user) view returns(bool)
func (_TssStakingSlashing *TssStakingSlashingCaller) GetSlashRecord(opts *bind.CallOpts, batchIndex *big.Int, user common.Address) (bool, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "getSlashRecord", batchIndex, user)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetSlashRecord is a free data retrieval call binding the contract method 0x829673ef.
//
// Solidity: function getSlashRecord(uint256 batchIndex, address user) view returns(bool)
func (_TssStakingSlashing *TssStakingSlashingSession) GetSlashRecord(batchIndex *big.Int, user common.Address) (bool, error) {
	return _TssStakingSlashing.Contract.GetSlashRecord(&_TssStakingSlashing.CallOpts, batchIndex, user)
}

// GetSlashRecord is a free data retrieval call binding the contract method 0x829673ef.
//
// Solidity: function getSlashRecord(uint256 batchIndex, address user) view returns(bool)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) GetSlashRecord(batchIndex *big.Int, user common.Address) (bool, error) {
	return _TssStakingSlashing.Contract.GetSlashRecord(&_TssStakingSlashing.CallOpts, batchIndex, user)
}

// GetSlashingParams is a free data retrieval call binding the contract method 0xb3fc1cb2.
//
// Solidity: function getSlashingParams() view returns(uint256[2], uint256[2])
func (_TssStakingSlashing *TssStakingSlashingCaller) GetSlashingParams(opts *bind.CallOpts) ([2]*big.Int, [2]*big.Int, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "getSlashingParams")

	if err != nil {
		return *new([2]*big.Int), *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)
	out1 := *abi.ConvertType(out[1], new([2]*big.Int)).(*[2]*big.Int)

	return out0, out1, err

}

// GetSlashingParams is a free data retrieval call binding the contract method 0xb3fc1cb2.
//
// Solidity: function getSlashingParams() view returns(uint256[2], uint256[2])
func (_TssStakingSlashing *TssStakingSlashingSession) GetSlashingParams() ([2]*big.Int, [2]*big.Int, error) {
	return _TssStakingSlashing.Contract.GetSlashingParams(&_TssStakingSlashing.CallOpts)
}

// GetSlashingParams is a free data retrieval call binding the contract method 0xb3fc1cb2.
//
// Solidity: function getSlashingParams() view returns(uint256[2], uint256[2])
func (_TssStakingSlashing *TssStakingSlashingCallerSession) GetSlashingParams() ([2]*big.Int, [2]*big.Int, error) {
	return _TssStakingSlashing.Contract.GetSlashingParams(&_TssStakingSlashing.CallOpts)
}

// IsEqual is a free data retrieval call binding the contract method 0x34359808.
//
// Solidity: function isEqual(bytes byteListA, bytes byteListB) pure returns(bool)
func (_TssStakingSlashing *TssStakingSlashingCaller) IsEqual(opts *bind.CallOpts, byteListA []byte, byteListB []byte) (bool, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "isEqual", byteListA, byteListB)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsEqual is a free data retrieval call binding the contract method 0x34359808.
//
// Solidity: function isEqual(bytes byteListA, bytes byteListB) pure returns(bool)
func (_TssStakingSlashing *TssStakingSlashingSession) IsEqual(byteListA []byte, byteListB []byte) (bool, error) {
	return _TssStakingSlashing.Contract.IsEqual(&_TssStakingSlashing.CallOpts, byteListA, byteListB)
}

// IsEqual is a free data retrieval call binding the contract method 0x34359808.
//
// Solidity: function isEqual(bytes byteListA, bytes byteListB) pure returns(bool)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) IsEqual(byteListA []byte, byteListB []byte) (bool, error) {
	return _TssStakingSlashing.Contract.IsEqual(&_TssStakingSlashing.CallOpts, byteListA, byteListB)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TssStakingSlashing *TssStakingSlashingCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TssStakingSlashing *TssStakingSlashingSession) Owner() (common.Address, error) {
	return _TssStakingSlashing.Contract.Owner(&_TssStakingSlashing.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) Owner() (common.Address, error) {
	return _TssStakingSlashing.Contract.Owner(&_TssStakingSlashing.CallOpts)
}

// QuitRequestList is a free data retrieval call binding the contract method 0x57b0f05f.
//
// Solidity: function quitRequestList(uint256 ) view returns(address)
func (_TssStakingSlashing *TssStakingSlashingCaller) QuitRequestList(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "quitRequestList", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// QuitRequestList is a free data retrieval call binding the contract method 0x57b0f05f.
//
// Solidity: function quitRequestList(uint256 ) view returns(address)
func (_TssStakingSlashing *TssStakingSlashingSession) QuitRequestList(arg0 *big.Int) (common.Address, error) {
	return _TssStakingSlashing.Contract.QuitRequestList(&_TssStakingSlashing.CallOpts, arg0)
}

// QuitRequestList is a free data retrieval call binding the contract method 0x57b0f05f.
//
// Solidity: function quitRequestList(uint256 ) view returns(address)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) QuitRequestList(arg0 *big.Int) (common.Address, error) {
	return _TssStakingSlashing.Contract.QuitRequestList(&_TssStakingSlashing.CallOpts, arg0)
}

// SlashAmount is a free data retrieval call binding the contract method 0xf2bd7400.
//
// Solidity: function slashAmount(uint256 ) view returns(uint256)
func (_TssStakingSlashing *TssStakingSlashingCaller) SlashAmount(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "slashAmount", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SlashAmount is a free data retrieval call binding the contract method 0xf2bd7400.
//
// Solidity: function slashAmount(uint256 ) view returns(uint256)
func (_TssStakingSlashing *TssStakingSlashingSession) SlashAmount(arg0 *big.Int) (*big.Int, error) {
	return _TssStakingSlashing.Contract.SlashAmount(&_TssStakingSlashing.CallOpts, arg0)
}

// SlashAmount is a free data retrieval call binding the contract method 0xf2bd7400.
//
// Solidity: function slashAmount(uint256 ) view returns(uint256)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) SlashAmount(arg0 *big.Int) (*big.Int, error) {
	return _TssStakingSlashing.Contract.SlashAmount(&_TssStakingSlashing.CallOpts, arg0)
}

// TssGroupContract is a free data retrieval call binding the contract method 0xd323041d.
//
// Solidity: function tssGroupContract() view returns(address)
func (_TssStakingSlashing *TssStakingSlashingCaller) TssGroupContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "tssGroupContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TssGroupContract is a free data retrieval call binding the contract method 0xd323041d.
//
// Solidity: function tssGroupContract() view returns(address)
func (_TssStakingSlashing *TssStakingSlashingSession) TssGroupContract() (common.Address, error) {
	return _TssStakingSlashing.Contract.TssGroupContract(&_TssStakingSlashing.CallOpts)
}

// TssGroupContract is a free data retrieval call binding the contract method 0xd323041d.
//
// Solidity: function tssGroupContract() view returns(address)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) TssGroupContract() (common.Address, error) {
	return _TssStakingSlashing.Contract.TssGroupContract(&_TssStakingSlashing.CallOpts)
}

// ClearQuitRequestList is a paid mutator transaction binding the contract method 0x111b8c02.
//
// Solidity: function clearQuitRequestList() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) ClearQuitRequestList(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "clearQuitRequestList")
}

// ClearQuitRequestList is a paid mutator transaction binding the contract method 0x111b8c02.
//
// Solidity: function clearQuitRequestList() returns()
func (_TssStakingSlashing *TssStakingSlashingSession) ClearQuitRequestList() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.ClearQuitRequestList(&_TssStakingSlashing.TransactOpts)
}

// ClearQuitRequestList is a paid mutator transaction binding the contract method 0x111b8c02.
//
// Solidity: function clearQuitRequestList() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) ClearQuitRequestList() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.ClearQuitRequestList(&_TssStakingSlashing.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _bitToken, address _tssGroupContract) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) Initialize(opts *bind.TransactOpts, _bitToken common.Address, _tssGroupContract common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "initialize", _bitToken, _tssGroupContract)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _bitToken, address _tssGroupContract) returns()
func (_TssStakingSlashing *TssStakingSlashingSession) Initialize(_bitToken common.Address, _tssGroupContract common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.Initialize(&_TssStakingSlashing.TransactOpts, _bitToken, _tssGroupContract)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _bitToken, address _tssGroupContract) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) Initialize(_bitToken common.Address, _tssGroupContract common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.Initialize(&_TssStakingSlashing.TransactOpts, _bitToken, _tssGroupContract)
}

// IsJailed is a paid mutator transaction binding the contract method 0x14bfb527.
//
// Solidity: function isJailed(address user) returns(bool)
func (_TssStakingSlashing *TssStakingSlashingTransactor) IsJailed(opts *bind.TransactOpts, user common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "isJailed", user)
}

// IsJailed is a paid mutator transaction binding the contract method 0x14bfb527.
//
// Solidity: function isJailed(address user) returns(bool)
func (_TssStakingSlashing *TssStakingSlashingSession) IsJailed(user common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.IsJailed(&_TssStakingSlashing.TransactOpts, user)
}

// IsJailed is a paid mutator transaction binding the contract method 0x14bfb527.
//
// Solidity: function isJailed(address user) returns(bool)
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) IsJailed(user common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.IsJailed(&_TssStakingSlashing.TransactOpts, user)
}

// QuitRequest is a paid mutator transaction binding the contract method 0x740efec3.
//
// Solidity: function quitRequest() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) QuitRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "quitRequest")
}

// QuitRequest is a paid mutator transaction binding the contract method 0x740efec3.
//
// Solidity: function quitRequest() returns()
func (_TssStakingSlashing *TssStakingSlashingSession) QuitRequest() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.QuitRequest(&_TssStakingSlashing.TransactOpts)
}

// QuitRequest is a paid mutator transaction binding the contract method 0x740efec3.
//
// Solidity: function quitRequest() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) QuitRequest() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.QuitRequest(&_TssStakingSlashing.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TssStakingSlashing *TssStakingSlashingSession) RenounceOwnership() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.RenounceOwnership(&_TssStakingSlashing.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.RenounceOwnership(&_TssStakingSlashing.TransactOpts)
}

// SetAddress is a paid mutator transaction binding the contract method 0x3b58524d.
//
// Solidity: function setAddress(address _token, address _tssGroup) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) SetAddress(opts *bind.TransactOpts, _token common.Address, _tssGroup common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "setAddress", _token, _tssGroup)
}

// SetAddress is a paid mutator transaction binding the contract method 0x3b58524d.
//
// Solidity: function setAddress(address _token, address _tssGroup) returns()
func (_TssStakingSlashing *TssStakingSlashingSession) SetAddress(_token common.Address, _tssGroup common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.SetAddress(&_TssStakingSlashing.TransactOpts, _token, _tssGroup)
}

// SetAddress is a paid mutator transaction binding the contract method 0x3b58524d.
//
// Solidity: function setAddress(address _token, address _tssGroup) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) SetAddress(_token common.Address, _tssGroup common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.SetAddress(&_TssStakingSlashing.TransactOpts, _token, _tssGroup)
}

// SetSlashingParams is a paid mutator transaction binding the contract method 0xde6fb88a.
//
// Solidity: function setSlashingParams(uint256[2] _slashAmount, uint256[2] _exIncome) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) SetSlashingParams(opts *bind.TransactOpts, _slashAmount [2]*big.Int, _exIncome [2]*big.Int) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "setSlashingParams", _slashAmount, _exIncome)
}

// SetSlashingParams is a paid mutator transaction binding the contract method 0xde6fb88a.
//
// Solidity: function setSlashingParams(uint256[2] _slashAmount, uint256[2] _exIncome) returns()
func (_TssStakingSlashing *TssStakingSlashingSession) SetSlashingParams(_slashAmount [2]*big.Int, _exIncome [2]*big.Int) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.SetSlashingParams(&_TssStakingSlashing.TransactOpts, _slashAmount, _exIncome)
}

// SetSlashingParams is a paid mutator transaction binding the contract method 0xde6fb88a.
//
// Solidity: function setSlashingParams(uint256[2] _slashAmount, uint256[2] _exIncome) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) SetSlashingParams(_slashAmount [2]*big.Int, _exIncome [2]*big.Int) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.SetSlashingParams(&_TssStakingSlashing.TransactOpts, _slashAmount, _exIncome)
}

// Slashing is a paid mutator transaction binding the contract method 0x5887c33c.
//
// Solidity: function slashing(bytes _messageBytes, bytes _sig) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) Slashing(opts *bind.TransactOpts, _messageBytes []byte, _sig []byte) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "slashing", _messageBytes, _sig)
}

// Slashing is a paid mutator transaction binding the contract method 0x5887c33c.
//
// Solidity: function slashing(bytes _messageBytes, bytes _sig) returns()
func (_TssStakingSlashing *TssStakingSlashingSession) Slashing(_messageBytes []byte, _sig []byte) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.Slashing(&_TssStakingSlashing.TransactOpts, _messageBytes, _sig)
}

// Slashing is a paid mutator transaction binding the contract method 0x5887c33c.
//
// Solidity: function slashing(bytes _messageBytes, bytes _sig) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) Slashing(_messageBytes []byte, _sig []byte) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.Slashing(&_TssStakingSlashing.TransactOpts, _messageBytes, _sig)
}

// Staking is a paid mutator transaction binding the contract method 0x5df6db49.
//
// Solidity: function staking(uint256 _amount, bytes _pubKey) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) Staking(opts *bind.TransactOpts, _amount *big.Int, _pubKey []byte) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "staking", _amount, _pubKey)
}

// Staking is a paid mutator transaction binding the contract method 0x5df6db49.
//
// Solidity: function staking(uint256 _amount, bytes _pubKey) returns()
func (_TssStakingSlashing *TssStakingSlashingSession) Staking(_amount *big.Int, _pubKey []byte) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.Staking(&_TssStakingSlashing.TransactOpts, _amount, _pubKey)
}

// Staking is a paid mutator transaction binding the contract method 0x5df6db49.
//
// Solidity: function staking(uint256 _amount, bytes _pubKey) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) Staking(_amount *big.Int, _pubKey []byte) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.Staking(&_TssStakingSlashing.TransactOpts, _amount, _pubKey)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TssStakingSlashing *TssStakingSlashingSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.TransferOwnership(&_TssStakingSlashing.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.TransferOwnership(&_TssStakingSlashing.TransactOpts, newOwner)
}

// UnJail is a paid mutator transaction binding the contract method 0x6eae5b11.
//
// Solidity: function unJail() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) UnJail(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "unJail")
}

// UnJail is a paid mutator transaction binding the contract method 0x6eae5b11.
//
// Solidity: function unJail() returns()
func (_TssStakingSlashing *TssStakingSlashingSession) UnJail() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.UnJail(&_TssStakingSlashing.TransactOpts)
}

// UnJail is a paid mutator transaction binding the contract method 0x6eae5b11.
//
// Solidity: function unJail() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) UnJail() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.UnJail(&_TssStakingSlashing.TransactOpts)
}

// WithdrawToken is a paid mutator transaction binding the contract method 0xca628c78.
//
// Solidity: function withdrawToken() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) WithdrawToken(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "withdrawToken")
}

// WithdrawToken is a paid mutator transaction binding the contract method 0xca628c78.
//
// Solidity: function withdrawToken() returns()
func (_TssStakingSlashing *TssStakingSlashingSession) WithdrawToken() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.WithdrawToken(&_TssStakingSlashing.TransactOpts)
}

// WithdrawToken is a paid mutator transaction binding the contract method 0xca628c78.
//
// Solidity: function withdrawToken() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) WithdrawToken() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.WithdrawToken(&_TssStakingSlashing.TransactOpts)
}

// TssStakingSlashingAddDepositIterator is returned from FilterAddDeposit and is used to iterate over the raw logs and unpacked data for AddDeposit events raised by the TssStakingSlashing contract.
type TssStakingSlashingAddDepositIterator struct {
	Event *TssStakingSlashingAddDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TssStakingSlashingAddDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TssStakingSlashingAddDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TssStakingSlashingAddDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TssStakingSlashingAddDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TssStakingSlashingAddDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TssStakingSlashingAddDeposit represents a AddDeposit event raised by the TssStakingSlashing contract.
type TssStakingSlashingAddDeposit struct {
	Arg0 common.Address
	Arg1 IStakingSlashingDepositInfo
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterAddDeposit is a free log retrieval operation binding the contract event 0x3183ac23cb0f1e36109abc28e6807d6282c166cb0a538cb5617024770fc73835.
//
// Solidity: event AddDeposit(address arg0, (address,bytes,uint256) arg1)
func (_TssStakingSlashing *TssStakingSlashingFilterer) FilterAddDeposit(opts *bind.FilterOpts) (*TssStakingSlashingAddDepositIterator, error) {

	logs, sub, err := _TssStakingSlashing.contract.FilterLogs(opts, "AddDeposit")
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingAddDepositIterator{contract: _TssStakingSlashing.contract, event: "AddDeposit", logs: logs, sub: sub}, nil
}

// WatchAddDeposit is a free log subscription operation binding the contract event 0x3183ac23cb0f1e36109abc28e6807d6282c166cb0a538cb5617024770fc73835.
//
// Solidity: event AddDeposit(address arg0, (address,bytes,uint256) arg1)
func (_TssStakingSlashing *TssStakingSlashingFilterer) WatchAddDeposit(opts *bind.WatchOpts, sink chan<- *TssStakingSlashingAddDeposit) (event.Subscription, error) {

	logs, sub, err := _TssStakingSlashing.contract.WatchLogs(opts, "AddDeposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TssStakingSlashingAddDeposit)
				if err := _TssStakingSlashing.contract.UnpackLog(event, "AddDeposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddDeposit is a log parse operation binding the contract event 0x3183ac23cb0f1e36109abc28e6807d6282c166cb0a538cb5617024770fc73835.
//
// Solidity: event AddDeposit(address arg0, (address,bytes,uint256) arg1)
func (_TssStakingSlashing *TssStakingSlashingFilterer) ParseAddDeposit(log types.Log) (*TssStakingSlashingAddDeposit, error) {
	event := new(TssStakingSlashingAddDeposit)
	if err := _TssStakingSlashing.contract.UnpackLog(event, "AddDeposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TssStakingSlashingInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the TssStakingSlashing contract.
type TssStakingSlashingInitializedIterator struct {
	Event *TssStakingSlashingInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TssStakingSlashingInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TssStakingSlashingInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TssStakingSlashingInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TssStakingSlashingInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TssStakingSlashingInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TssStakingSlashingInitialized represents a Initialized event raised by the TssStakingSlashing contract.
type TssStakingSlashingInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_TssStakingSlashing *TssStakingSlashingFilterer) FilterInitialized(opts *bind.FilterOpts) (*TssStakingSlashingInitializedIterator, error) {

	logs, sub, err := _TssStakingSlashing.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingInitializedIterator{contract: _TssStakingSlashing.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_TssStakingSlashing *TssStakingSlashingFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *TssStakingSlashingInitialized) (event.Subscription, error) {

	logs, sub, err := _TssStakingSlashing.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TssStakingSlashingInitialized)
				if err := _TssStakingSlashing.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_TssStakingSlashing *TssStakingSlashingFilterer) ParseInitialized(log types.Log) (*TssStakingSlashingInitialized, error) {
	event := new(TssStakingSlashingInitialized)
	if err := _TssStakingSlashing.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TssStakingSlashingOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the TssStakingSlashing contract.
type TssStakingSlashingOwnershipTransferredIterator struct {
	Event *TssStakingSlashingOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TssStakingSlashingOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TssStakingSlashingOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TssStakingSlashingOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TssStakingSlashingOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TssStakingSlashingOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TssStakingSlashingOwnershipTransferred represents a OwnershipTransferred event raised by the TssStakingSlashing contract.
type TssStakingSlashingOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TssStakingSlashing *TssStakingSlashingFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TssStakingSlashingOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TssStakingSlashing.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingOwnershipTransferredIterator{contract: _TssStakingSlashing.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TssStakingSlashing *TssStakingSlashingFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TssStakingSlashingOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TssStakingSlashing.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TssStakingSlashingOwnershipTransferred)
				if err := _TssStakingSlashing.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TssStakingSlashing *TssStakingSlashingFilterer) ParseOwnershipTransferred(log types.Log) (*TssStakingSlashingOwnershipTransferred, error) {
	event := new(TssStakingSlashingOwnershipTransferred)
	if err := _TssStakingSlashing.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TssStakingSlashingSlashingIterator is returned from FilterSlashing and is used to iterate over the raw logs and unpacked data for Slashing events raised by the TssStakingSlashing contract.
type TssStakingSlashingSlashingIterator struct {
	Event *TssStakingSlashingSlashing // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TssStakingSlashingSlashingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TssStakingSlashingSlashing)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TssStakingSlashingSlashing)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TssStakingSlashingSlashingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TssStakingSlashingSlashingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TssStakingSlashingSlashing represents a Slashing event raised by the TssStakingSlashing contract.
type TssStakingSlashingSlashing struct {
	Arg0 common.Address
	Arg1 uint8
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterSlashing is a free log retrieval operation binding the contract event 0x9453459a6e9fa2069f1490c99cec15646afa157300f218a7f7840b23d09dbd3e.
//
// Solidity: event Slashing(address arg0, uint8 arg1)
func (_TssStakingSlashing *TssStakingSlashingFilterer) FilterSlashing(opts *bind.FilterOpts) (*TssStakingSlashingSlashingIterator, error) {

	logs, sub, err := _TssStakingSlashing.contract.FilterLogs(opts, "Slashing")
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingSlashingIterator{contract: _TssStakingSlashing.contract, event: "Slashing", logs: logs, sub: sub}, nil
}

// WatchSlashing is a free log subscription operation binding the contract event 0x9453459a6e9fa2069f1490c99cec15646afa157300f218a7f7840b23d09dbd3e.
//
// Solidity: event Slashing(address arg0, uint8 arg1)
func (_TssStakingSlashing *TssStakingSlashingFilterer) WatchSlashing(opts *bind.WatchOpts, sink chan<- *TssStakingSlashingSlashing) (event.Subscription, error) {

	logs, sub, err := _TssStakingSlashing.contract.WatchLogs(opts, "Slashing")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TssStakingSlashingSlashing)
				if err := _TssStakingSlashing.contract.UnpackLog(event, "Slashing", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashing is a log parse operation binding the contract event 0x9453459a6e9fa2069f1490c99cec15646afa157300f218a7f7840b23d09dbd3e.
//
// Solidity: event Slashing(address arg0, uint8 arg1)
func (_TssStakingSlashing *TssStakingSlashingFilterer) ParseSlashing(log types.Log) (*TssStakingSlashingSlashing, error) {
	event := new(TssStakingSlashingSlashing)
	if err := _TssStakingSlashing.contract.UnpackLog(event, "Slashing", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TssStakingSlashingWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the TssStakingSlashing contract.
type TssStakingSlashingWithdrawIterator struct {
	Event *TssStakingSlashingWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TssStakingSlashingWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TssStakingSlashingWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TssStakingSlashingWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TssStakingSlashingWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TssStakingSlashingWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TssStakingSlashingWithdraw represents a Withdraw event raised by the TssStakingSlashing contract.
type TssStakingSlashingWithdraw struct {
	Arg0 common.Address
	Arg1 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address arg0, uint256 arg1)
func (_TssStakingSlashing *TssStakingSlashingFilterer) FilterWithdraw(opts *bind.FilterOpts) (*TssStakingSlashingWithdrawIterator, error) {

	logs, sub, err := _TssStakingSlashing.contract.FilterLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingWithdrawIterator{contract: _TssStakingSlashing.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address arg0, uint256 arg1)
func (_TssStakingSlashing *TssStakingSlashingFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *TssStakingSlashingWithdraw) (event.Subscription, error) {

	logs, sub, err := _TssStakingSlashing.contract.WatchLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TssStakingSlashingWithdraw)
				if err := _TssStakingSlashing.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address arg0, uint256 arg1)
func (_TssStakingSlashing *TssStakingSlashingFilterer) ParseWithdraw(log types.Log) (*TssStakingSlashingWithdraw, error) {
	event := new(TssStakingSlashingWithdraw)
	if err := _TssStakingSlashing.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
