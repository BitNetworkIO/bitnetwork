// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package tsh

import (
	"math/big"
	"strings"

	ethereum "github.com/bitdao-io/bitnetwork/l2geth"
	"github.com/bitdao-io/bitnetwork/l2geth/accounts/abi"
	"github.com/bitdao-io/bitnetwork/l2geth/accounts/abi/bind"
	"github.com/bitdao-io/bitnetwork/l2geth/common"
	"github.com/bitdao-io/bitnetwork/l2geth/core/types"
	"github.com/bitdao-io/bitnetwork/l2geth/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// IStakingSlashingDepositInfo is an auto generated low-level Go binding around an user-defined struct.
type IStakingSlashingDepositInfo struct {
	PubKey []byte
	Amount *big.Int
}

// TssStakingSlashingABI is the input ABI used to generate the binding from.
const TssStakingSlashingABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structIStakingSlashing.DepositInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"AddDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumTssStakingSlashing.SlashType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"Slashing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BitToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearQuitList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structIStakingSlashing.DepositInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQuitList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getSlashRecord\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlashingParams\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_libAddressManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"byteListA\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"byteListB\",\"type\":\"bytes\"}],\"name\":\"isEqual\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isJailed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"libAddressManager\",\"outputs\":[{\"internalType\":\"contractLib_AddressManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quitList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tssGroup\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_slashAmount\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_exIncome\",\"type\":\"uint256[2]\"}],\"name\":\"setSlashingParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slashAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_messageBytes\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"slashing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_pubKey\",\"type\":\"bytes\"}],\"name\":\"staking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tssGroupContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unJail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// TssStakingSlashingBin is the compiled bytecode used for deploying new contracts.
var TssStakingSlashingBin = "0x608060405234801561001057600080fd5b506000805462010000600160b01b031916905561347a806100326000396000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c8063ad0f36e1116100ee578063de6fb88a11610097578063f2fde38b11610071578063f2fde38b146103a0578063f34710f3146103b3578063fc2b8cc3146103c8578063fc7e286d146103d057600080fd5b8063de6fb88a14610367578063eb20b5891461037a578063f2bd74001461038d57600080fd5b8063ca628c78116100c8578063ca628c7814610344578063cd7b03941461034c578063d323041d1461035457600080fd5b8063ad0f36e114610308578063b3fc1cb21461031b578063c4d66de81461033157600080fd5b80635887c33c1161015b578063715018a611610135578063715018a614610296578063829673ef1461029e5780638da5cb5b146102d757806394f649dd146102e857600080fd5b80635887c33c146102685780635df6db491461027b5780636eae5b111461028e57600080fd5b80633b58524d1161018c5780633b58524d1461021f5780633f95043814610234578063461a44781461025557600080fd5b806314bfb527146101b3578063299ca478146101db578063343598081461020c575b600080fd5b6101c66101c13660046129e6565b6103f1565b60405190151581526020015b60405180910390f35b6000546101f4906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020016101d2565b6101c661021a366004612b78565b6104e1565b61023261022d366004612bdc565b6105a5565b005b610247610242366004612c15565b6105f3565b6040519081526020016101d2565b6101f4610263366004612c2e565b61060a565b610232610276366004612b78565b6106a9565b610232610289366004612c7f565b610a78565b610232610eba565b6102326110b5565b6101c66102ac366004612cbc565b6000918252609f602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6033546001600160a01b03166101f4565b6102fb6102f63660046129e6565b6110c9565b6040516101d29190612d80565b6101f4610316366004612c15565b6111a2565b6103236111cc565b6040516101d2929190612db6565b61023261033f3660046129e6565b611247565b610232611567565b610232611987565b6098546101f4906001600160a01b031681565b610232610375366004612e41565b61199b565b6097546101f4906001600160a01b031681565b61024761039b366004612c15565b611b25565b6102326103ae3660046129e6565b611b35565b6103bb611bc5565b6040516101d29190612e76565b610232611c27565b6103e36103de3660046129e6565b611fa7565b6040516101d2929190612ec3565b6098546001600160a01b0382811660009081526099602052604080822090517f54bbb9140000000000000000000000000000000000000000000000000000000081529193849316916354bbb9149161044b91600401612f39565b600060405180830381600087803b15801561046557600080fd5b505af1158015610479573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526104bf9190810190613037565b90506001816040015160018111156104d9576104d96130fe565b149392505050565b600081518351146104f45750600061059f565b60005b8351811015610599578281815181106105125761051261312d565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168482815181106105515761055161312d565b01602001517fff00000000000000000000000000000000000000000000000000000000000000161461058757600091505061059f565b806105918161318b565b9150506104f7565b50600190505b92915050565b6105ad61204b565b609780546001600160a01b039384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560988054929093169116179055565b609d816002811061060357600080fd5b0154905081565b600080546040517fbf40fac1000000000000000000000000000000000000000000000000000000008152620100009091046001600160a01b03169063bf40fac1906106599085906004016131c4565b60206040518083038186803b15801561067157600080fd5b505afa158015610685573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059f91906131d7565b600260655414156107015760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002606555815160009061071e9084016020908101908501613203565b905061072d81602001516103f1565b1561077a5760405162461bcd60e51b815260206004820152601760248201527f746865206e6f646520616c7265616479206a61696c656400000000000000000060448201526064016106f8565b609854336000908152609960205260409081902090517fbcbc5fc60000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163bcbc5fc6916107d191600401612f39565b602060405180830381600087803b1580156107eb57600080fd5b505af11580156107ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610823919061330d565b61086f5760405162461bcd60e51b815260206004820152601e60248201527f73656e646572206e6f7420617420746865206163746976652067726f7570000060448201526064016106f8565b80516000908152609f60209081526040808320828501516001600160a01b0316845290915290205460ff16156108e75760405162461bcd60e51b815260206004820152600f60248201527f616c726561647920736c6173686564000000000000000000000000000000000060448201526064016106f8565b80516000908152609f60209081526040808320828501516001600160a01b0390811685529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905560985486519287019290922090517f3231a7f00000000000000000000000000000000000000000000000000000000081529190921691633231a7f0916109869190869060040161332f565b602060405180830381600087803b1580156109a057600080fd5b505af11580156109b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d8919061330d565b610a245760405162461bcd60e51b815260206004820152601c60248201527f73696e676572206e6f74207473732067726f757020707562206b65790000000060448201526064016106f8565b610a2d816120a5565b7f9453459a6e9fa2069f1490c99cec15646afa157300f218a7f7840b23d09dbd3e81602001518260600151604051610a66929190613348565b60405180910390a15050600160655550565b60026065541415610acb5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106f8565b600260655581610b1d5760405162461bcd60e51b815260206004820152600e60248201527f696e76616c696420616d6f756e7400000000000000000000000000000000000060448201526064016106f8565b3360009081526099602052604081208054610b3790612ee5565b90501115610c33573360009081526099602052604090208054610be29190610b5e90612ee5565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8a90612ee5565b8015610bd75780601f10610bac57610100808354040283529160200191610bd7565b820191906000526020600020905b815481529060010190602001808311610bba57829003601f168201915b5050505050826104e1565b610c2e5760405162461bcd60e51b815260206004820152601060248201527f7075624b6579206e6f7420657175616c0000000000000000000000000000000060448201526064016106f8565b610d50565b6098546040517f43ae656c0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906343ae656c90610c7c9084906004016131c4565b602060405180830381600087803b158015610c9657600080fd5b505af1158015610caa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cce91906131d7565b6001600160a01b0316336001600160a01b031614610d2e5760405162461bcd60e51b815260206004820152600e60248201527f696e76616c6964207075624b657900000000000000000000000000000000000060448201526064016106f8565b3360009081526099602090815260409091208251610d4e928401906128c6565b505b6097546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490526001600160a01b03909116906323b872dd90606401602060405180830381600087803b158015610dbb57600080fd5b505af1158015610dcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df3919061330d565b610e3f5760405162461bcd60e51b815260206004820152601b60248201527f7472616e7366657220657263323020746f6b656e206661696c6564000000000060448201526064016106f8565b3360009081526099602052604081206001018054849290610e6190849061339c565b90915550506040805180820182528281526020810184905290517fe91a186cb155660cfb539570b2dc1732dd5b6848ece0d2a67bfadd897409399791610ea9913391906133b4565b60405180910390a150506001606555565b60005b6002811015610fc5576000609b8260028110610edb57610edb61312d565b015411610f2a5760405162461bcd60e51b815260206004820152601d60248201527f68617665206e6f74207365742074686520736c61736820616d6f756e7400000060448201526064016106f8565b6000609d8260028110610f3f57610f3f61312d565b015411610fb35760405162461bcd60e51b8152602060048201526024808201527f68617665206e6f74207365742074686520657874726120696e636f6d6520616d60448201527f6f756e740000000000000000000000000000000000000000000000000000000060648201526084016106f8565b80610fbd8161318b565b915050610ebd565b50609c5433600090815260996020526040902060010154101561102a5760405162461bcd60e51b815260206004820152601460248201527f496e73756666696369656e742062616c616e636500000000000000000000000060448201526064016106f8565b609854336000908152609960205260409081902090517f429ec49c0000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163429ec49c9161108191600401612f39565b600060405180830381600087803b15801561109b57600080fd5b505af11580156110af573d6000803e3d6000fd5b50505050565b6110bd61204b565b6110c76000612403565b565b6040805180820190915260608152600060208201526001600160a01b03821660009081526099602052604090819020815180830190925280548290829061110f90612ee5565b80601f016020809104026020016040519081016040528092919081815260200182805461113b90612ee5565b80156111885780601f1061115d57610100808354040283529160200191611188565b820191906000526020600020905b81548152906001019060200180831161116b57829003601f168201915b505050505081526020016001820154815250509050919050565b609a81815481106111b257600080fd5b6000918252602090912001546001600160a01b0316905081565b6111d461294a565b6111dc61294a565b6040805180820191829052609b91609d9190839060029082845b8154815260200190600101908083116111f6575050604080518082019182905294965085935060029250905082845b8154815260200190600101908083116112255750505050509050915091509091565b600054610100900460ff16158080156112675750600054600160ff909116105b806112815750303b158015611281575060005460ff166001145b6112f35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016106f8565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561135157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b61135961246d565b6000546201000090046001600160a01b0316156113de5760405162461bcd60e51b815260206004820152602a60248201527f4c3143726f7373446f6d61696e4d657373656e67657220616c7265616479206960448201527f6e7469616c697a65642e0000000000000000000000000000000000000000000060648201526084016106f8565b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b0385160217905560408051808201909152600881527f426974546f6b656e00000000000000000000000000000000000000000000000060208201526114539061060a565b609780547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905560408051808201909152600f81527f54737347726f75704d616e61676572000000000000000000000000000000000060208201526114c89061060a565b609880547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055801561156357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600260655414156115ba5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106f8565b6002606555336000908152609960205260409020600101548061161f5760405162461bcd60e51b815260206004820152601360248201527f646f206e6f742068617665206465706f7369740000000000000000000000000060448201526064016106f8565b336000908152609960205260408120805461163990612ee5565b80601f016020809104026020016040519081016040528092919081815260200182805461166590612ee5565b80156116b25780601f10611687576101008083540402835291602001916116b2565b820191906000526020600020905b81548152906001019060200180831161169557829003601f168201915b50506098546040517f4866e2e00000000000000000000000000000000000000000000000000000000081529495506001600160a01b031693634866e2e0935061170192508591506004016131c4565b602060405180830381600087803b15801561171b57600080fd5b505af115801561172f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611753919061330d565b1580156117f857506098546040517fbcbc5fc60000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063bcbc5fc6906117a49084906004016131c4565b602060405180830381600087803b1580156117be57600080fd5b505af11580156117d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f6919061330d565b155b6118445760405162461bcd60e51b815260206004820152601560248201527f6e6f74206174207468652072696768742074696d65000000000000000000000060448201526064016106f8565b3360009081526099602052604081209061185e8282612968565b506000600191909101556097546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018490526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b1580156118cd57600080fd5b505af11580156118e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611905919061330d565b6119515760405162461bcd60e51b815260206004820152601560248201527f6572633230207472616e73666572206661696c6564000000000000000000000060448201526064016106f8565b60408051338152602081018490527f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649101610ea9565b61198f61204b565b6110c7609a60006129a2565b6119a361204b565b60005b6002811015611b205760008282600281106119c3576119c361312d565b602002015111611a155760405162461bcd60e51b815260206004820152600e60248201527f696e76616c696420616d6f756e7400000000000000000000000000000000000060448201526064016106f8565b818160028110611a2757611a2761312d565b6020020151838260028110611a3e57611a3e61312d565b602002015111611ab65760405162461bcd60e51b815260206004820152602560248201527f736c617368416d6f756e74206e65656420626967676572207468616e2065784960448201527f6e636f6d6500000000000000000000000000000000000000000000000000000060648201526084016106f8565b828160028110611ac857611ac861312d565b6020020151609b8260028110611ae057611ae061312d565b0155818160028110611af457611af461312d565b6020020151609d8260028110611b0c57611b0c61312d565b015580611b188161318b565b9150506119a6565b505050565b609b816002811061060357600080fd5b611b3d61204b565b6001600160a01b038116611bb95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016106f8565b611bc281612403565b50565b6060609a805480602002602001604051908101604052809291908181526020018280548015611c1d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611bff575b5050505050905090565b60026065541415611c7a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106f8565b600260655533600090815260996020526040902060010154611cde5760405162461bcd60e51b815260206004820152601360248201527f646f206e6f742068617665206465706f7369740000000000000000000000000060448201526064016106f8565b609860009054906101000a90046001600160a01b03166001600160a01b0316638a51d8b46040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611d2e57600080fd5b505af1158015611d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d66919061330d565b611db25760405162461bcd60e51b815260206004820152601560248201527f6e6f74206174207468652072696768742074696d65000000000000000000000060448201526064016106f8565b609854336000908152609960205260409081902090517fbcbc5fc60000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163bcbc5fc691611e0991600401612f39565b602060405180830381600087803b158015611e2357600080fd5b505af1158015611e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5b919061330d565b611ea75760405162461bcd60e51b815260206004820152601760248201527f6e6f7420617420746865206163746976652067726f757000000000000000000060448201526064016106f8565b60005b609a54811015611f4657336001600160a01b0316609a8281548110611ed157611ed161312d565b6000918252602090912001546001600160a01b03161415611f345760405162461bcd60e51b815260206004820152601360248201527f616c726561647920696e20717569744c6973740000000000000000000000000060448201526064016106f8565b80611f3e8161318b565b915050611eaa565b50609a8054600181810183556000929092527f44da158ba27f9252712a74ff6a55c5d531f69609f1f6e7f17c4443a8e2089be40180547fffffffffffffffffffffffff00000000000000000000000000000000000000001633179055606555565b609960205260009081526040902080548190611fc290612ee5565b80601f0160208091040260200160405190810160405280929190818152602001828054611fee90612ee5565b801561203b5780601f106120105761010080835404028352916020019161203b565b820191906000526020600020905b81548152906001019060200180831161201e57829003601f168201915b5050505050908060010154905082565b6033546001600160a01b031633146110c75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106f8565b60005b60028110156121b0576000609b82600281106120c6576120c661312d565b0154116121155760405162461bcd60e51b815260206004820152601d60248201527f68617665206e6f74207365742074686520736c61736820616d6f756e7400000060448201526064016106f8565b6000609d826002811061212a5761212a61312d565b01541161219e5760405162461bcd60e51b8152602060048201526024808201527f68617665206e6f74207365742074686520657874726120696e636f6d6520616d60448201527f6f756e740000000000000000000000000000000000000000000000000000000060648201526084016106f8565b806121a88161318b565b9150506120a8565b506020808201516001600160a01b0316600090815260999091526040812080546121d990612ee5565b80601f016020809104026020016040519081016040528092919081815260200182805461220590612ee5565b80156122525780601f1061222757610100808354040283529160200191612252565b820191906000526020600020905b81548152906001019060200180831161223557829003601f168201915b509394506001935061226392505050565b82606001516002811115612279576122796130fe565b141561230e576098546040517f254ff9810000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063254ff981906122c89084906004016131c4565b600060405180830381600087803b1580156122e257600080fd5b505af11580156122f6573d6000803e3d6000fd5b505050506115638260200151600084604001516124f2565b600282606001516002811115612326576123266130fe565b14156123bb576098546040517f7a952c110000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690637a952c11906123759084906004016131c4565b600060405180830381600087803b15801561238f57600080fd5b505af11580156123a3573d6000803e3d6000fd5b505050506115638260200151600184604001516124f2565b60405162461bcd60e51b815260206004820152601560248201527f657272207479706520666f7220736c617368696e67000000000000000000000060448201526064016106f8565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166124ea5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016106f8565b6110c7612840565b6000806000806000609b876002811061250d5761250d61312d565b01546001600160a01b03891660009081526099602052604090206001015411156125c957609b87600281106125445761254461312d565b01549450609b876002811061255b5761255b61312d565b01546001600160a01b038916600090815260996020526040812060010180549091906125889084906133d6565b90915550609d905087600281106125a1576125a161312d565b0154609b88600281106125b6576125b661312d565b01546125c291906133d6565b92506126d4565b609d87600281106125dc576125dc61312d565b01546001600160a01b0389166000908152609960205260409020600101541115612641576001600160a01b038816600090815260996020526040812060010180549190559450609d87600281106126355761263561312d565b01546125c290866133d6565b6001600160a01b0388166000908152609960205260409020600101541561268c576001600160a01b0388166000908152609960205260408120600101805491905594508492506126d4565b60405162461bcd60e51b815260206004820152601460248201527f70616e6963202c20696e76616c6964207479706500000000000000000000000060448201526064016106f8565b85516126e0908461341c565b86519092506126ef83856133d6565b6126f99190613430565b905081609d886002811061270f5761270f61312d565b015461271b919061339c565b336000908152609960205260408120600101805490919061273d90849061339c565b90915550829050609d88600281106127575761275761312d565b0154612763919061339c565b935060005b86518110156127e65761277b828661339c565b945081609960008984815181106127945761279461312d565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060010160008282546127ce919061339c565b909155508190506127de8161318b565b915050612768565b508484146128365760405162461bcd60e51b815260206004820152601860248201527f70616e69632c2063616c63756c6174696f6e206572726f72000000000000000060448201526064016106f8565b5050505050505050565b600054610100900460ff166128bd5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016106f8565b6110c733612403565b8280546128d290612ee5565b90600052602060002090601f0160209004810192826128f4576000855561293a565b82601f1061290d57805160ff191683800117855561293a565b8280016001018555821561293a579182015b8281111561293a57825182559160200191906001019061291f565b506129469291506129bc565b5090565b60405180604001604052806002906020820280368337509192915050565b50805461297490612ee5565b6000825580601f10612984575050565b601f016020900490600052602060002090810190611bc291906129bc565b5080546000825590600052602060002090810190611bc291905b5b8082111561294657600081556001016129bd565b6001600160a01b0381168114611bc257600080fd5b6000602082840312156129f857600080fd5b8135612a03816129d1565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715612a5c57612a5c612a0a565b60405290565b6040516080810167ffffffffffffffff81118282101715612a5c57612a5c612a0a565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612acc57612acc612a0a565b604052919050565b600067ffffffffffffffff821115612aee57612aee612a0a565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6000612b2d612b2884612ad4565b612a85565b9050828152838383011115612b4157600080fd5b828260208301376000602084830101529392505050565b600082601f830112612b6957600080fd5b612a0383833560208501612b1a565b60008060408385031215612b8b57600080fd5b823567ffffffffffffffff80821115612ba357600080fd5b612baf86838701612b58565b93506020850135915080821115612bc557600080fd5b50612bd285828601612b58565b9150509250929050565b60008060408385031215612bef57600080fd5b8235612bfa816129d1565b91506020830135612c0a816129d1565b809150509250929050565b600060208284031215612c2757600080fd5b5035919050565b600060208284031215612c4057600080fd5b813567ffffffffffffffff811115612c5757600080fd5b8201601f81018413612c6857600080fd5b612c7784823560208401612b1a565b949350505050565b60008060408385031215612c9257600080fd5b82359150602083013567ffffffffffffffff811115612cb057600080fd5b612bd285828601612b58565b60008060408385031215612ccf57600080fd5b823591506020830135612c0a816129d1565b60005b83811015612cfc578181015183820152602001612ce4565b838111156110af5750506000910152565b60008151808452612d25816020860160208601612ce1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000815160408452612d6c6040850182612d0d565b602093840151949093019390935250919050565b602081526000612a036020830184612d57565b8060005b60028110156110af578151845260209384019390910190600101612d97565b60808101612dc48285612d93565b612a036040830184612d93565b600082601f830112612de257600080fd5b6040516040810181811067ffffffffffffffff82111715612e0557612e05612a0a565b8060405250806040840185811115612e1c57600080fd5b845b81811015612e36578035835260209283019201612e1e565b509195945050505050565b60008060808385031215612e5457600080fd5b612e5e8484612dd1565b9150612e6d8460408501612dd1565b90509250929050565b6020808252825182820181905260009190848201906040850190845b81811015612eb75783516001600160a01b031683529284019291840191600101612e92565b50909695505050505050565b604081526000612ed66040830185612d0d565b90508260208301529392505050565b600181811c90821680612ef957607f821691505b60208210811415612f33577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600060208083526000845481600182811c915080831680612f5b57607f831692505b858310811415612f92577f4e487b710000000000000000000000000000000000000000000000000000000085526022600452602485fd5b878601838152602001818015612faf5760018114612fde57613009565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00861682528782019650613009565b60008b81526020902060005b8681101561300357815484820152908501908901612fea565b83019750505b50949998505050505050505050565b8051613023816129d1565b919050565b80516002811061302357600080fd5b6000602080838503121561304a57600080fd5b825167ffffffffffffffff8082111561306257600080fd5b908401906060828703121561307657600080fd5b61307e612a39565b82518281111561308d57600080fd5b83019150601f820187136130a057600080fd5b81516130ae612b2882612ad4565b81815288868386010111156130c257600080fd5b6130d182878301888701612ce1565b8252506130df838501613018565b848201526130ef60408401613028565b60408201529695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156131bd576131bd61315c565b5060010190565b602081526000612a036020830184612d0d565b6000602082840312156131e957600080fd5b8151612a03816129d1565b80516003811061302357600080fd5b6000602080838503121561321657600080fd5b825167ffffffffffffffff8082111561322e57600080fd5b908401906080828703121561324257600080fd5b61324a612a62565b825181528383015161325b816129d1565b8185015260408301518281111561327157600080fd5b8301601f8101881361328257600080fd5b80518381111561329457613294612a0a565b8060051b93506132a5868501612a85565b818152938201860193868101908a8611156132bf57600080fd5b928701925b858410156132e957835192506132d9836129d1565b82825292870192908701906132c4565b6040850152506132fe915050606084016131f4565b60608201529695505050505050565b60006020828403121561331f57600080fd5b81518015158114612a0357600080fd5b828152604060208201526000612c776040830184612d0d565b6001600160a01b0383168152604081016003831061338f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8260208301529392505050565b600082198211156133af576133af61315c565b500190565b6001600160a01b0383168152604060208201526000612c776040830184612d57565b6000828210156133e8576133e861315c565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261342b5761342b6133ed565b500690565b60008261343f5761343f6133ed565b50049056fea264697066735822122045e0a333bfdde1f5d9ca293f8b6b363a8657098a6304caf97aa666a584d140e964736f6c63430008090033"

// DeployTssStakingSlashing deploys a new Ethereum contract, binding an instance of TssStakingSlashing to it.
func DeployTssStakingSlashing(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TssStakingSlashing, error) {
	parsed, err := abi.JSON(strings.NewReader(TssStakingSlashingABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(TssStakingSlashingBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TssStakingSlashing{TssStakingSlashingCaller: TssStakingSlashingCaller{contract: contract}, TssStakingSlashingTransactor: TssStakingSlashingTransactor{contract: contract}, TssStakingSlashingFilterer: TssStakingSlashingFilterer{contract: contract}}, nil
}

// TssStakingSlashing is an auto generated Go binding around an Ethereum contract.
type TssStakingSlashing struct {
	TssStakingSlashingCaller     // Read-only binding to the contract
	TssStakingSlashingTransactor // Write-only binding to the contract
	TssStakingSlashingFilterer   // Log filterer for contract events
}

// TssStakingSlashingCaller is an auto generated read-only Go binding around an Ethereum contract.
type TssStakingSlashingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TssStakingSlashingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TssStakingSlashingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TssStakingSlashingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TssStakingSlashingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TssStakingSlashingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TssStakingSlashingSession struct {
	Contract     *TssStakingSlashing // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// TssStakingSlashingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TssStakingSlashingCallerSession struct {
	Contract *TssStakingSlashingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// TssStakingSlashingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TssStakingSlashingTransactorSession struct {
	Contract     *TssStakingSlashingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// TssStakingSlashingRaw is an auto generated low-level Go binding around an Ethereum contract.
type TssStakingSlashingRaw struct {
	Contract *TssStakingSlashing // Generic contract binding to access the raw methods on
}

// TssStakingSlashingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TssStakingSlashingCallerRaw struct {
	Contract *TssStakingSlashingCaller // Generic read-only contract binding to access the raw methods on
}

// TssStakingSlashingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TssStakingSlashingTransactorRaw struct {
	Contract *TssStakingSlashingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTssStakingSlashing creates a new instance of TssStakingSlashing, bound to a specific deployed contract.
func NewTssStakingSlashing(address common.Address, backend bind.ContractBackend) (*TssStakingSlashing, error) {
	contract, err := bindTssStakingSlashing(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashing{TssStakingSlashingCaller: TssStakingSlashingCaller{contract: contract}, TssStakingSlashingTransactor: TssStakingSlashingTransactor{contract: contract}, TssStakingSlashingFilterer: TssStakingSlashingFilterer{contract: contract}}, nil
}

// NewTssStakingSlashingCaller creates a new read-only instance of TssStakingSlashing, bound to a specific deployed contract.
func NewTssStakingSlashingCaller(address common.Address, caller bind.ContractCaller) (*TssStakingSlashingCaller, error) {
	contract, err := bindTssStakingSlashing(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingCaller{contract: contract}, nil
}

// NewTssStakingSlashingTransactor creates a new write-only instance of TssStakingSlashing, bound to a specific deployed contract.
func NewTssStakingSlashingTransactor(address common.Address, transactor bind.ContractTransactor) (*TssStakingSlashingTransactor, error) {
	contract, err := bindTssStakingSlashing(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingTransactor{contract: contract}, nil
}

// NewTssStakingSlashingFilterer creates a new log filterer instance of TssStakingSlashing, bound to a specific deployed contract.
func NewTssStakingSlashingFilterer(address common.Address, filterer bind.ContractFilterer) (*TssStakingSlashingFilterer, error) {
	contract, err := bindTssStakingSlashing(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingFilterer{contract: contract}, nil
}

// bindTssStakingSlashing binds a generic wrapper to an already deployed contract.
func bindTssStakingSlashing(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TssStakingSlashingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TssStakingSlashing *TssStakingSlashingRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _TssStakingSlashing.Contract.TssStakingSlashingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TssStakingSlashing *TssStakingSlashingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.TssStakingSlashingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TssStakingSlashing *TssStakingSlashingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.TssStakingSlashingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TssStakingSlashing *TssStakingSlashingCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _TssStakingSlashing.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TssStakingSlashing *TssStakingSlashingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TssStakingSlashing *TssStakingSlashingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.contract.Transact(opts, method, params...)
}

// BitToken is a free data retrieval call binding the contract method 0xeb20b589.
//
// Solidity: function BitToken() constant returns(address)
func (_TssStakingSlashing *TssStakingSlashingCaller) BitToken(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TssStakingSlashing.contract.Call(opts, out, "BitToken")
	return *ret0, err
}

// BitToken is a free data retrieval call binding the contract method 0xeb20b589.
//
// Solidity: function BitToken() constant returns(address)
func (_TssStakingSlashing *TssStakingSlashingSession) BitToken() (common.Address, error) {
	return _TssStakingSlashing.Contract.BitToken(&_TssStakingSlashing.CallOpts)
}

// BitToken is a free data retrieval call binding the contract method 0xeb20b589.
//
// Solidity: function BitToken() constant returns(address)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) BitToken() (common.Address, error) {
	return _TssStakingSlashing.Contract.BitToken(&_TssStakingSlashing.CallOpts)
}

// Deposits is a free data retrieval call binding the contract method 0xfc7e286d.
//
// Solidity: function deposits(address ) constant returns(bytes pubKey, uint256 amount)
func (_TssStakingSlashing *TssStakingSlashingCaller) Deposits(opts *bind.CallOpts, arg0 common.Address) (struct {
	PubKey []byte
	Amount *big.Int
}, error) {
	ret := new(struct {
		PubKey []byte
		Amount *big.Int
	})
	out := ret
	err := _TssStakingSlashing.contract.Call(opts, out, "deposits", arg0)
	return *ret, err
}

// Deposits is a free data retrieval call binding the contract method 0xfc7e286d.
//
// Solidity: function deposits(address ) constant returns(bytes pubKey, uint256 amount)
func (_TssStakingSlashing *TssStakingSlashingSession) Deposits(arg0 common.Address) (struct {
	PubKey []byte
	Amount *big.Int
}, error) {
	return _TssStakingSlashing.Contract.Deposits(&_TssStakingSlashing.CallOpts, arg0)
}

// Deposits is a free data retrieval call binding the contract method 0xfc7e286d.
//
// Solidity: function deposits(address ) constant returns(bytes pubKey, uint256 amount)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) Deposits(arg0 common.Address) (struct {
	PubKey []byte
	Amount *big.Int
}, error) {
	return _TssStakingSlashing.Contract.Deposits(&_TssStakingSlashing.CallOpts, arg0)
}

// ExIncome is a free data retrieval call binding the contract method 0x3f950438.
//
// Solidity: function exIncome(uint256 ) constant returns(uint256)
func (_TssStakingSlashing *TssStakingSlashingCaller) ExIncome(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _TssStakingSlashing.contract.Call(opts, out, "exIncome", arg0)
	return *ret0, err
}

// ExIncome is a free data retrieval call binding the contract method 0x3f950438.
//
// Solidity: function exIncome(uint256 ) constant returns(uint256)
func (_TssStakingSlashing *TssStakingSlashingSession) ExIncome(arg0 *big.Int) (*big.Int, error) {
	return _TssStakingSlashing.Contract.ExIncome(&_TssStakingSlashing.CallOpts, arg0)
}

// ExIncome is a free data retrieval call binding the contract method 0x3f950438.
//
// Solidity: function exIncome(uint256 ) constant returns(uint256)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) ExIncome(arg0 *big.Int) (*big.Int, error) {
	return _TssStakingSlashing.Contract.ExIncome(&_TssStakingSlashing.CallOpts, arg0)
}

// GetDeposits is a free data retrieval call binding the contract method 0x94f649dd.
//
// Solidity: function getDeposits(address user) constant returns(IStakingSlashingDepositInfo)
func (_TssStakingSlashing *TssStakingSlashingCaller) GetDeposits(opts *bind.CallOpts, user common.Address) (IStakingSlashingDepositInfo, error) {
	var (
		ret0 = new(IStakingSlashingDepositInfo)
	)
	out := ret0
	err := _TssStakingSlashing.contract.Call(opts, out, "getDeposits", user)
	return *ret0, err
}

// GetDeposits is a free data retrieval call binding the contract method 0x94f649dd.
//
// Solidity: function getDeposits(address user) constant returns(IStakingSlashingDepositInfo)
func (_TssStakingSlashing *TssStakingSlashingSession) GetDeposits(user common.Address) (IStakingSlashingDepositInfo, error) {
	return _TssStakingSlashing.Contract.GetDeposits(&_TssStakingSlashing.CallOpts, user)
}

// GetDeposits is a free data retrieval call binding the contract method 0x94f649dd.
//
// Solidity: function getDeposits(address user) constant returns(IStakingSlashingDepositInfo)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) GetDeposits(user common.Address) (IStakingSlashingDepositInfo, error) {
	return _TssStakingSlashing.Contract.GetDeposits(&_TssStakingSlashing.CallOpts, user)
}

// GetQuitList is a free data retrieval call binding the contract method 0xf34710f3.
//
// Solidity: function getQuitList() constant returns(address[])
func (_TssStakingSlashing *TssStakingSlashingCaller) GetQuitList(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _TssStakingSlashing.contract.Call(opts, out, "getQuitList")
	return *ret0, err
}

// GetQuitList is a free data retrieval call binding the contract method 0xf34710f3.
//
// Solidity: function getQuitList() constant returns(address[])
func (_TssStakingSlashing *TssStakingSlashingSession) GetQuitList() ([]common.Address, error) {
	return _TssStakingSlashing.Contract.GetQuitList(&_TssStakingSlashing.CallOpts)
}

// GetQuitList is a free data retrieval call binding the contract method 0xf34710f3.
//
// Solidity: function getQuitList() constant returns(address[])
func (_TssStakingSlashing *TssStakingSlashingCallerSession) GetQuitList() ([]common.Address, error) {
	return _TssStakingSlashing.Contract.GetQuitList(&_TssStakingSlashing.CallOpts)
}

// GetSlashRecord is a free data retrieval call binding the contract method 0x829673ef.
//
// Solidity: function getSlashRecord(uint256 batchIndex, address user) constant returns(bool)
func (_TssStakingSlashing *TssStakingSlashingCaller) GetSlashRecord(opts *bind.CallOpts, batchIndex *big.Int, user common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _TssStakingSlashing.contract.Call(opts, out, "getSlashRecord", batchIndex, user)
	return *ret0, err
}

// GetSlashRecord is a free data retrieval call binding the contract method 0x829673ef.
//
// Solidity: function getSlashRecord(uint256 batchIndex, address user) constant returns(bool)
func (_TssStakingSlashing *TssStakingSlashingSession) GetSlashRecord(batchIndex *big.Int, user common.Address) (bool, error) {
	return _TssStakingSlashing.Contract.GetSlashRecord(&_TssStakingSlashing.CallOpts, batchIndex, user)
}

// GetSlashRecord is a free data retrieval call binding the contract method 0x829673ef.
//
// Solidity: function getSlashRecord(uint256 batchIndex, address user) constant returns(bool)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) GetSlashRecord(batchIndex *big.Int, user common.Address) (bool, error) {
	return _TssStakingSlashing.Contract.GetSlashRecord(&_TssStakingSlashing.CallOpts, batchIndex, user)
}

// GetSlashingParams is a free data retrieval call binding the contract method 0xb3fc1cb2.
//
// Solidity: function getSlashingParams() constant returns(uint256[2], uint256[2])
func (_TssStakingSlashing *TssStakingSlashingCaller) GetSlashingParams(opts *bind.CallOpts) ([2]*big.Int, [2]*big.Int, error) {
	var (
		ret0 = new([2]*big.Int)
		ret1 = new([2]*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _TssStakingSlashing.contract.Call(opts, out, "getSlashingParams")
	return *ret0, *ret1, err
}

// GetSlashingParams is a free data retrieval call binding the contract method 0xb3fc1cb2.
//
// Solidity: function getSlashingParams() constant returns(uint256[2], uint256[2])
func (_TssStakingSlashing *TssStakingSlashingSession) GetSlashingParams() ([2]*big.Int, [2]*big.Int, error) {
	return _TssStakingSlashing.Contract.GetSlashingParams(&_TssStakingSlashing.CallOpts)
}

// GetSlashingParams is a free data retrieval call binding the contract method 0xb3fc1cb2.
//
// Solidity: function getSlashingParams() constant returns(uint256[2], uint256[2])
func (_TssStakingSlashing *TssStakingSlashingCallerSession) GetSlashingParams() ([2]*big.Int, [2]*big.Int, error) {
	return _TssStakingSlashing.Contract.GetSlashingParams(&_TssStakingSlashing.CallOpts)
}

// IsEqual is a free data retrieval call binding the contract method 0x34359808.
//
// Solidity: function isEqual(bytes byteListA, bytes byteListB) constant returns(bool)
func (_TssStakingSlashing *TssStakingSlashingCaller) IsEqual(opts *bind.CallOpts, byteListA []byte, byteListB []byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _TssStakingSlashing.contract.Call(opts, out, "isEqual", byteListA, byteListB)
	return *ret0, err
}

// IsEqual is a free data retrieval call binding the contract method 0x34359808.
//
// Solidity: function isEqual(bytes byteListA, bytes byteListB) constant returns(bool)
func (_TssStakingSlashing *TssStakingSlashingSession) IsEqual(byteListA []byte, byteListB []byte) (bool, error) {
	return _TssStakingSlashing.Contract.IsEqual(&_TssStakingSlashing.CallOpts, byteListA, byteListB)
}

// IsEqual is a free data retrieval call binding the contract method 0x34359808.
//
// Solidity: function isEqual(bytes byteListA, bytes byteListB) constant returns(bool)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) IsEqual(byteListA []byte, byteListB []byte) (bool, error) {
	return _TssStakingSlashing.Contract.IsEqual(&_TssStakingSlashing.CallOpts, byteListA, byteListB)
}

// LibAddressManager is a free data retrieval call binding the contract method 0x299ca478.
//
// Solidity: function libAddressManager() constant returns(address)
func (_TssStakingSlashing *TssStakingSlashingCaller) LibAddressManager(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TssStakingSlashing.contract.Call(opts, out, "libAddressManager")
	return *ret0, err
}

// LibAddressManager is a free data retrieval call binding the contract method 0x299ca478.
//
// Solidity: function libAddressManager() constant returns(address)
func (_TssStakingSlashing *TssStakingSlashingSession) LibAddressManager() (common.Address, error) {
	return _TssStakingSlashing.Contract.LibAddressManager(&_TssStakingSlashing.CallOpts)
}

// LibAddressManager is a free data retrieval call binding the contract method 0x299ca478.
//
// Solidity: function libAddressManager() constant returns(address)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) LibAddressManager() (common.Address, error) {
	return _TssStakingSlashing.Contract.LibAddressManager(&_TssStakingSlashing.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_TssStakingSlashing *TssStakingSlashingCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TssStakingSlashing.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_TssStakingSlashing *TssStakingSlashingSession) Owner() (common.Address, error) {
	return _TssStakingSlashing.Contract.Owner(&_TssStakingSlashing.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) Owner() (common.Address, error) {
	return _TssStakingSlashing.Contract.Owner(&_TssStakingSlashing.CallOpts)
}

// QuitList is a free data retrieval call binding the contract method 0xad0f36e1.
//
// Solidity: function quitList(uint256 ) constant returns(address)
func (_TssStakingSlashing *TssStakingSlashingCaller) QuitList(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TssStakingSlashing.contract.Call(opts, out, "quitList", arg0)
	return *ret0, err
}

// QuitList is a free data retrieval call binding the contract method 0xad0f36e1.
//
// Solidity: function quitList(uint256 ) constant returns(address)
func (_TssStakingSlashing *TssStakingSlashingSession) QuitList(arg0 *big.Int) (common.Address, error) {
	return _TssStakingSlashing.Contract.QuitList(&_TssStakingSlashing.CallOpts, arg0)
}

// QuitList is a free data retrieval call binding the contract method 0xad0f36e1.
//
// Solidity: function quitList(uint256 ) constant returns(address)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) QuitList(arg0 *big.Int) (common.Address, error) {
	return _TssStakingSlashing.Contract.QuitList(&_TssStakingSlashing.CallOpts, arg0)
}

// Resolve is a free data retrieval call binding the contract method 0x461a4478.
//
// Solidity: function resolve(string _name) constant returns(address)
func (_TssStakingSlashing *TssStakingSlashingCaller) Resolve(opts *bind.CallOpts, _name string) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TssStakingSlashing.contract.Call(opts, out, "resolve", _name)
	return *ret0, err
}

// Resolve is a free data retrieval call binding the contract method 0x461a4478.
//
// Solidity: function resolve(string _name) constant returns(address)
func (_TssStakingSlashing *TssStakingSlashingSession) Resolve(_name string) (common.Address, error) {
	return _TssStakingSlashing.Contract.Resolve(&_TssStakingSlashing.CallOpts, _name)
}

// Resolve is a free data retrieval call binding the contract method 0x461a4478.
//
// Solidity: function resolve(string _name) constant returns(address)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) Resolve(_name string) (common.Address, error) {
	return _TssStakingSlashing.Contract.Resolve(&_TssStakingSlashing.CallOpts, _name)
}

// SlashAmount is a free data retrieval call binding the contract method 0xf2bd7400.
//
// Solidity: function slashAmount(uint256 ) constant returns(uint256)
func (_TssStakingSlashing *TssStakingSlashingCaller) SlashAmount(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _TssStakingSlashing.contract.Call(opts, out, "slashAmount", arg0)
	return *ret0, err
}

// SlashAmount is a free data retrieval call binding the contract method 0xf2bd7400.
//
// Solidity: function slashAmount(uint256 ) constant returns(uint256)
func (_TssStakingSlashing *TssStakingSlashingSession) SlashAmount(arg0 *big.Int) (*big.Int, error) {
	return _TssStakingSlashing.Contract.SlashAmount(&_TssStakingSlashing.CallOpts, arg0)
}

// SlashAmount is a free data retrieval call binding the contract method 0xf2bd7400.
//
// Solidity: function slashAmount(uint256 ) constant returns(uint256)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) SlashAmount(arg0 *big.Int) (*big.Int, error) {
	return _TssStakingSlashing.Contract.SlashAmount(&_TssStakingSlashing.CallOpts, arg0)
}

// TssGroupContract is a free data retrieval call binding the contract method 0xd323041d.
//
// Solidity: function tssGroupContract() constant returns(address)
func (_TssStakingSlashing *TssStakingSlashingCaller) TssGroupContract(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _TssStakingSlashing.contract.Call(opts, out, "tssGroupContract")
	return *ret0, err
}

// TssGroupContract is a free data retrieval call binding the contract method 0xd323041d.
//
// Solidity: function tssGroupContract() constant returns(address)
func (_TssStakingSlashing *TssStakingSlashingSession) TssGroupContract() (common.Address, error) {
	return _TssStakingSlashing.Contract.TssGroupContract(&_TssStakingSlashing.CallOpts)
}

// TssGroupContract is a free data retrieval call binding the contract method 0xd323041d.
//
// Solidity: function tssGroupContract() constant returns(address)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) TssGroupContract() (common.Address, error) {
	return _TssStakingSlashing.Contract.TssGroupContract(&_TssStakingSlashing.CallOpts)
}

// ClearQuitList is a paid mutator transaction binding the contract method 0xcd7b0394.
//
// Solidity: function clearQuitList() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) ClearQuitList(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "clearQuitList")
}

// ClearQuitList is a paid mutator transaction binding the contract method 0xcd7b0394.
//
// Solidity: function clearQuitList() returns()
func (_TssStakingSlashing *TssStakingSlashingSession) ClearQuitList() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.ClearQuitList(&_TssStakingSlashing.TransactOpts)
}

// ClearQuitList is a paid mutator transaction binding the contract method 0xcd7b0394.
//
// Solidity: function clearQuitList() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) ClearQuitList() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.ClearQuitList(&_TssStakingSlashing.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _libAddressManager) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) Initialize(opts *bind.TransactOpts, _libAddressManager common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "initialize", _libAddressManager)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _libAddressManager) returns()
func (_TssStakingSlashing *TssStakingSlashingSession) Initialize(_libAddressManager common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.Initialize(&_TssStakingSlashing.TransactOpts, _libAddressManager)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _libAddressManager) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) Initialize(_libAddressManager common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.Initialize(&_TssStakingSlashing.TransactOpts, _libAddressManager)
}

// IsJailed is a paid mutator transaction binding the contract method 0x14bfb527.
//
// Solidity: function isJailed(address user) returns(bool)
func (_TssStakingSlashing *TssStakingSlashingTransactor) IsJailed(opts *bind.TransactOpts, user common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "isJailed", user)
}

// IsJailed is a paid mutator transaction binding the contract method 0x14bfb527.
//
// Solidity: function isJailed(address user) returns(bool)
func (_TssStakingSlashing *TssStakingSlashingSession) IsJailed(user common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.IsJailed(&_TssStakingSlashing.TransactOpts, user)
}

// IsJailed is a paid mutator transaction binding the contract method 0x14bfb527.
//
// Solidity: function isJailed(address user) returns(bool)
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) IsJailed(user common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.IsJailed(&_TssStakingSlashing.TransactOpts, user)
}

// Quit is a paid mutator transaction binding the contract method 0xfc2b8cc3.
//
// Solidity: function quit() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) Quit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "quit")
}

// Quit is a paid mutator transaction binding the contract method 0xfc2b8cc3.
//
// Solidity: function quit() returns()
func (_TssStakingSlashing *TssStakingSlashingSession) Quit() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.Quit(&_TssStakingSlashing.TransactOpts)
}

// Quit is a paid mutator transaction binding the contract method 0xfc2b8cc3.
//
// Solidity: function quit() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) Quit() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.Quit(&_TssStakingSlashing.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TssStakingSlashing *TssStakingSlashingSession) RenounceOwnership() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.RenounceOwnership(&_TssStakingSlashing.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.RenounceOwnership(&_TssStakingSlashing.TransactOpts)
}

// SetAddress is a paid mutator transaction binding the contract method 0x3b58524d.
//
// Solidity: function setAddress(address _token, address _tssGroup) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) SetAddress(opts *bind.TransactOpts, _token common.Address, _tssGroup common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "setAddress", _token, _tssGroup)
}

// SetAddress is a paid mutator transaction binding the contract method 0x3b58524d.
//
// Solidity: function setAddress(address _token, address _tssGroup) returns()
func (_TssStakingSlashing *TssStakingSlashingSession) SetAddress(_token common.Address, _tssGroup common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.SetAddress(&_TssStakingSlashing.TransactOpts, _token, _tssGroup)
}

// SetAddress is a paid mutator transaction binding the contract method 0x3b58524d.
//
// Solidity: function setAddress(address _token, address _tssGroup) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) SetAddress(_token common.Address, _tssGroup common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.SetAddress(&_TssStakingSlashing.TransactOpts, _token, _tssGroup)
}

// SetSlashingParams is a paid mutator transaction binding the contract method 0xde6fb88a.
//
// Solidity: function setSlashingParams(uint256[2] _slashAmount, uint256[2] _exIncome) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) SetSlashingParams(opts *bind.TransactOpts, _slashAmount [2]*big.Int, _exIncome [2]*big.Int) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "setSlashingParams", _slashAmount, _exIncome)
}

// SetSlashingParams is a paid mutator transaction binding the contract method 0xde6fb88a.
//
// Solidity: function setSlashingParams(uint256[2] _slashAmount, uint256[2] _exIncome) returns()
func (_TssStakingSlashing *TssStakingSlashingSession) SetSlashingParams(_slashAmount [2]*big.Int, _exIncome [2]*big.Int) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.SetSlashingParams(&_TssStakingSlashing.TransactOpts, _slashAmount, _exIncome)
}

// SetSlashingParams is a paid mutator transaction binding the contract method 0xde6fb88a.
//
// Solidity: function setSlashingParams(uint256[2] _slashAmount, uint256[2] _exIncome) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) SetSlashingParams(_slashAmount [2]*big.Int, _exIncome [2]*big.Int) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.SetSlashingParams(&_TssStakingSlashing.TransactOpts, _slashAmount, _exIncome)
}

// Slashing is a paid mutator transaction binding the contract method 0x5887c33c.
//
// Solidity: function slashing(bytes _messageBytes, bytes _sig) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) Slashing(opts *bind.TransactOpts, _messageBytes []byte, _sig []byte) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "slashing", _messageBytes, _sig)
}

// Slashing is a paid mutator transaction binding the contract method 0x5887c33c.
//
// Solidity: function slashing(bytes _messageBytes, bytes _sig) returns()
func (_TssStakingSlashing *TssStakingSlashingSession) Slashing(_messageBytes []byte, _sig []byte) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.Slashing(&_TssStakingSlashing.TransactOpts, _messageBytes, _sig)
}

// Slashing is a paid mutator transaction binding the contract method 0x5887c33c.
//
// Solidity: function slashing(bytes _messageBytes, bytes _sig) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) Slashing(_messageBytes []byte, _sig []byte) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.Slashing(&_TssStakingSlashing.TransactOpts, _messageBytes, _sig)
}

// Staking is a paid mutator transaction binding the contract method 0x5df6db49.
//
// Solidity: function staking(uint256 _amount, bytes _pubKey) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) Staking(opts *bind.TransactOpts, _amount *big.Int, _pubKey []byte) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "staking", _amount, _pubKey)
}

// Staking is a paid mutator transaction binding the contract method 0x5df6db49.
//
// Solidity: function staking(uint256 _amount, bytes _pubKey) returns()
func (_TssStakingSlashing *TssStakingSlashingSession) Staking(_amount *big.Int, _pubKey []byte) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.Staking(&_TssStakingSlashing.TransactOpts, _amount, _pubKey)
}

// Staking is a paid mutator transaction binding the contract method 0x5df6db49.
//
// Solidity: function staking(uint256 _amount, bytes _pubKey) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) Staking(_amount *big.Int, _pubKey []byte) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.Staking(&_TssStakingSlashing.TransactOpts, _amount, _pubKey)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TssStakingSlashing *TssStakingSlashingSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.TransferOwnership(&_TssStakingSlashing.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.TransferOwnership(&_TssStakingSlashing.TransactOpts, newOwner)
}

// UnJail is a paid mutator transaction binding the contract method 0x6eae5b11.
//
// Solidity: function unJail() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) UnJail(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "unJail")
}

// UnJail is a paid mutator transaction binding the contract method 0x6eae5b11.
//
// Solidity: function unJail() returns()
func (_TssStakingSlashing *TssStakingSlashingSession) UnJail() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.UnJail(&_TssStakingSlashing.TransactOpts)
}

// UnJail is a paid mutator transaction binding the contract method 0x6eae5b11.
//
// Solidity: function unJail() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) UnJail() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.UnJail(&_TssStakingSlashing.TransactOpts)
}

// WithdrawToken is a paid mutator transaction binding the contract method 0xca628c78.
//
// Solidity: function withdrawToken() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) WithdrawToken(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "withdrawToken")
}

// WithdrawToken is a paid mutator transaction binding the contract method 0xca628c78.
//
// Solidity: function withdrawToken() returns()
func (_TssStakingSlashing *TssStakingSlashingSession) WithdrawToken() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.WithdrawToken(&_TssStakingSlashing.TransactOpts)
}

// WithdrawToken is a paid mutator transaction binding the contract method 0xca628c78.
//
// Solidity: function withdrawToken() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) WithdrawToken() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.WithdrawToken(&_TssStakingSlashing.TransactOpts)
}

// TssStakingSlashingAddDepositIterator is returned from FilterAddDeposit and is used to iterate over the raw logs and unpacked data for AddDeposit events raised by the TssStakingSlashing contract.
type TssStakingSlashingAddDepositIterator struct {
	Event *TssStakingSlashingAddDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TssStakingSlashingAddDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TssStakingSlashingAddDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TssStakingSlashingAddDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TssStakingSlashingAddDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TssStakingSlashingAddDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TssStakingSlashingAddDeposit represents a AddDeposit event raised by the TssStakingSlashing contract.
type TssStakingSlashingAddDeposit struct {
	Arg0 common.Address
	Arg1 IStakingSlashingDepositInfo
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterAddDeposit is a free log retrieval operation binding the contract event 0xe91a186cb155660cfb539570b2dc1732dd5b6848ece0d2a67bfadd8974093997.
//
// Solidity: event AddDeposit(address , IStakingSlashingDepositInfo )
func (_TssStakingSlashing *TssStakingSlashingFilterer) FilterAddDeposit(opts *bind.FilterOpts) (*TssStakingSlashingAddDepositIterator, error) {

	logs, sub, err := _TssStakingSlashing.contract.FilterLogs(opts, "AddDeposit")
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingAddDepositIterator{contract: _TssStakingSlashing.contract, event: "AddDeposit", logs: logs, sub: sub}, nil
}

// WatchAddDeposit is a free log subscription operation binding the contract event 0xe91a186cb155660cfb539570b2dc1732dd5b6848ece0d2a67bfadd8974093997.
//
// Solidity: event AddDeposit(address , IStakingSlashingDepositInfo )
func (_TssStakingSlashing *TssStakingSlashingFilterer) WatchAddDeposit(opts *bind.WatchOpts, sink chan<- *TssStakingSlashingAddDeposit) (event.Subscription, error) {

	logs, sub, err := _TssStakingSlashing.contract.WatchLogs(opts, "AddDeposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TssStakingSlashingAddDeposit)
				if err := _TssStakingSlashing.contract.UnpackLog(event, "AddDeposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddDeposit is a log parse operation binding the contract event 0xe91a186cb155660cfb539570b2dc1732dd5b6848ece0d2a67bfadd8974093997.
//
// Solidity: event AddDeposit(address , IStakingSlashingDepositInfo )
func (_TssStakingSlashing *TssStakingSlashingFilterer) ParseAddDeposit(log types.Log) (*TssStakingSlashingAddDeposit, error) {
	event := new(TssStakingSlashingAddDeposit)
	if err := _TssStakingSlashing.contract.UnpackLog(event, "AddDeposit", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TssStakingSlashingInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the TssStakingSlashing contract.
type TssStakingSlashingInitializedIterator struct {
	Event *TssStakingSlashingInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TssStakingSlashingInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TssStakingSlashingInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TssStakingSlashingInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TssStakingSlashingInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TssStakingSlashingInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TssStakingSlashingInitialized represents a Initialized event raised by the TssStakingSlashing contract.
type TssStakingSlashingInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_TssStakingSlashing *TssStakingSlashingFilterer) FilterInitialized(opts *bind.FilterOpts) (*TssStakingSlashingInitializedIterator, error) {

	logs, sub, err := _TssStakingSlashing.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingInitializedIterator{contract: _TssStakingSlashing.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_TssStakingSlashing *TssStakingSlashingFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *TssStakingSlashingInitialized) (event.Subscription, error) {

	logs, sub, err := _TssStakingSlashing.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TssStakingSlashingInitialized)
				if err := _TssStakingSlashing.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_TssStakingSlashing *TssStakingSlashingFilterer) ParseInitialized(log types.Log) (*TssStakingSlashingInitialized, error) {
	event := new(TssStakingSlashingInitialized)
	if err := _TssStakingSlashing.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TssStakingSlashingOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the TssStakingSlashing contract.
type TssStakingSlashingOwnershipTransferredIterator struct {
	Event *TssStakingSlashingOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TssStakingSlashingOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TssStakingSlashingOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TssStakingSlashingOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TssStakingSlashingOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TssStakingSlashingOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TssStakingSlashingOwnershipTransferred represents a OwnershipTransferred event raised by the TssStakingSlashing contract.
type TssStakingSlashingOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TssStakingSlashing *TssStakingSlashingFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TssStakingSlashingOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TssStakingSlashing.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingOwnershipTransferredIterator{contract: _TssStakingSlashing.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TssStakingSlashing *TssStakingSlashingFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TssStakingSlashingOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TssStakingSlashing.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TssStakingSlashingOwnershipTransferred)
				if err := _TssStakingSlashing.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TssStakingSlashing *TssStakingSlashingFilterer) ParseOwnershipTransferred(log types.Log) (*TssStakingSlashingOwnershipTransferred, error) {
	event := new(TssStakingSlashingOwnershipTransferred)
	if err := _TssStakingSlashing.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TssStakingSlashingSlashingIterator is returned from FilterSlashing and is used to iterate over the raw logs and unpacked data for Slashing events raised by the TssStakingSlashing contract.
type TssStakingSlashingSlashingIterator struct {
	Event *TssStakingSlashingSlashing // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TssStakingSlashingSlashingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TssStakingSlashingSlashing)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TssStakingSlashingSlashing)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TssStakingSlashingSlashingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TssStakingSlashingSlashingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TssStakingSlashingSlashing represents a Slashing event raised by the TssStakingSlashing contract.
type TssStakingSlashingSlashing struct {
	Arg0 common.Address
	Arg1 uint8
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterSlashing is a free log retrieval operation binding the contract event 0x9453459a6e9fa2069f1490c99cec15646afa157300f218a7f7840b23d09dbd3e.
//
// Solidity: event Slashing(address , uint8 )
func (_TssStakingSlashing *TssStakingSlashingFilterer) FilterSlashing(opts *bind.FilterOpts) (*TssStakingSlashingSlashingIterator, error) {

	logs, sub, err := _TssStakingSlashing.contract.FilterLogs(opts, "Slashing")
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingSlashingIterator{contract: _TssStakingSlashing.contract, event: "Slashing", logs: logs, sub: sub}, nil
}

// WatchSlashing is a free log subscription operation binding the contract event 0x9453459a6e9fa2069f1490c99cec15646afa157300f218a7f7840b23d09dbd3e.
//
// Solidity: event Slashing(address , uint8 )
func (_TssStakingSlashing *TssStakingSlashingFilterer) WatchSlashing(opts *bind.WatchOpts, sink chan<- *TssStakingSlashingSlashing) (event.Subscription, error) {

	logs, sub, err := _TssStakingSlashing.contract.WatchLogs(opts, "Slashing")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TssStakingSlashingSlashing)
				if err := _TssStakingSlashing.contract.UnpackLog(event, "Slashing", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashing is a log parse operation binding the contract event 0x9453459a6e9fa2069f1490c99cec15646afa157300f218a7f7840b23d09dbd3e.
//
// Solidity: event Slashing(address , uint8 )
func (_TssStakingSlashing *TssStakingSlashingFilterer) ParseSlashing(log types.Log) (*TssStakingSlashingSlashing, error) {
	event := new(TssStakingSlashingSlashing)
	if err := _TssStakingSlashing.contract.UnpackLog(event, "Slashing", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TssStakingSlashingWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the TssStakingSlashing contract.
type TssStakingSlashingWithdrawIterator struct {
	Event *TssStakingSlashingWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TssStakingSlashingWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TssStakingSlashingWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TssStakingSlashingWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TssStakingSlashingWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TssStakingSlashingWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TssStakingSlashingWithdraw represents a Withdraw event raised by the TssStakingSlashing contract.
type TssStakingSlashingWithdraw struct {
	Arg0 common.Address
	Arg1 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address , uint256 )
func (_TssStakingSlashing *TssStakingSlashingFilterer) FilterWithdraw(opts *bind.FilterOpts) (*TssStakingSlashingWithdrawIterator, error) {

	logs, sub, err := _TssStakingSlashing.contract.FilterLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingWithdrawIterator{contract: _TssStakingSlashing.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address , uint256 )
func (_TssStakingSlashing *TssStakingSlashingFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *TssStakingSlashingWithdraw) (event.Subscription, error) {

	logs, sub, err := _TssStakingSlashing.contract.WatchLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TssStakingSlashingWithdraw)
				if err := _TssStakingSlashing.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address , uint256 )
func (_TssStakingSlashing *TssStakingSlashingFilterer) ParseWithdraw(log types.Log) (*TssStakingSlashingWithdraw, error) {
	event := new(TssStakingSlashingWithdraw)
	if err := _TssStakingSlashing.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	return event, nil
}
