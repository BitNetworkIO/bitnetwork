// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package tsh

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IStakingSlashingDepositInfo is an auto generated low-level Go binding around an user-defined struct.
type IStakingSlashingDepositInfo struct {
	Pledgor common.Address
	PubKey  []byte
	Amount  *big.Int
}

// TssStakingSlashingMetaData contains all meta data concerning the TssStakingSlashing contract.
var TssStakingSlashingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pledgor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structIStakingSlashing.DepositInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"AddDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumTssStakingSlashing.SlashType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"Slashing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MantleToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"batchGetDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pledgor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structIStakingSlashing.DepositInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearQuitRequestList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pledgor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pledgor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structIStakingSlashing.DepositInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQuitRequestList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getSlashRecord\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlashingParams\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mantleToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tssGroupContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"byteListA\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"byteListB\",\"type\":\"bytes\"}],\"name\":\"isEqual\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isJailed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quitRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quitRequestList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tssGroup\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_slashAmount\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_exIncome\",\"type\":\"uint256[2]\"}],\"name\":\"setSlashingParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slashAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_messageBytes\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"slashing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_pubKey\",\"type\":\"bytes\"}],\"name\":\"staking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tssGroupContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unJail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61310880620000f46000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c8063740efec3116100de578063b3fc1cb211610097578063de6fb88a11610071578063de6fb88a14610350578063f2bd740014610363578063f2fde38b14610376578063fc7e286d1461038957600080fd5b8063b3fc1cb21461031f578063ca628c7814610335578063d323041d1461033d57600080fd5b8063740efec31461027a578063793505c81461028257806380f3c106146102a2578063829673ef146102b55780638da5cb5b146102ee57806394f649dd146102ff57600080fd5b8063490ab9d611610130578063490ab9d61461020457806357b0f05f146102195780635887c33c146102445780635df6db49146102575780636eae5b111461026a578063715018a61461027257600080fd5b8063111b8c021461017857806314bfb5271461018257806334359808146101aa5780633b58524d146101bd5780633f950438146101d0578063485cc955146101f1575b600080fd5b6101806103ab565b005b61019561019036600461256d565b6103c1565b60405190151581526020015b60405180910390f35b6101956101b83660046126a2565b6104cf565b6101806101cb366004612706565b610563565b6101e36101de36600461273f565b610599565b6040519081526020016101a1565b6101806101ff366004612706565b6105b0565b61020c6106fb565b6040516101a19190612758565b61022c61022736600461273f565b61075d565b6040516001600160a01b0390911681526020016101a1565b6101806102523660046127ee565b610787565b61018061026536600461285a565b6109f1565b610180610f43565b61018061109d565b6101806110af565b6102956102903660046128a6565b6113a4565b6040516101a191906129ae565b60975461022c906001600160a01b031681565b6101956102c3366004612a10565b6000918252609f602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6033546001600160a01b031661022c565b61031261030d36600461256d565b611561565b6040516101a19190612a35565b610327611664565b6040516101a1929190612a6b565b6101806116df565b60985461022c906001600160a01b031681565b61018061035e366004612a97565b611a8a565b6101e361037136600461273f565b611cb5565b61018061038436600461256d565b611cc5565b61039c61039736600461256d565b611d3e565b6040516101a193929190612acc565b6103b3611df3565b6103bf609a600061244d565b565b6098546001600160a01b03828116600090815260996020526040808220905163152eee4560e21b81529193849316916354bbb9149161040891600190910190600401612b3b565b600060405180830381600087803b15801561042257600080fd5b505af1158015610436573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261045e9190810190612c02565b8051519091506040146104af5760405162461bcd60e51b81526020600482015260146024820152731d1cdcc81b595b58995c881b9bdd08195e1a5cdd60621b60448201526064015b60405180910390fd5b6001816040015160018111156104c7576104c7612cc9565b149392505050565b600081518351146104e25750600061055d565b60005b83518110156105575782818151811061050057610500612cdf565b602001015160f81c60f81b6001600160f81b03191684828151811061052757610527612cdf565b01602001516001600160f81b0319161461054557600091505061055d565b8061054f81612d0b565b9150506104e5565b50600190505b92915050565b61056b611df3565b609780546001600160a01b039384166001600160a01b03199182161790915560988054929093169116179055565b609d81600281106105a957600080fd5b0154905081565b600054610100900460ff16158080156105d05750600054600160ff909116105b806105ea5750303b1580156105ea575060005460ff166001145b61064d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104a6565b6000805460ff191660011790558015610670576000805461ff0019166101001790555b610678611e4d565b610680611e7c565b609780546001600160a01b038086166001600160a01b031992831617909255609880549285169290911691909117905580156106f6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6060609a80548060200260200160405190810160405280929190818152602001828054801561075357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610735575b5050505050905090565b609a818154811061076d57600080fd5b6000918252602090912001546001600160a01b0316905081565b600260655414156107aa5760405162461bcd60e51b81526004016104a690612d26565b600260655560006107bd84860186612d6c565b90506107cc81602001516103c1565b156108195760405162461bcd60e51b815260206004820152601760248201527f746865206e6f646520616c7265616479206a61696c656400000000000000000060448201526064016104a6565b80516000908152609f60209081526040808320828501516001600160a01b0316845290915290205460ff16156108835760405162461bcd60e51b815260206004820152600f60248201526e185b1c9958591e481cdb185cda1959608a1b60448201526064016104a6565b80516000908152609f60209081526040808320828501516001600160a01b039081168552925291829020805460ff191660011790556098549151911690633231a7f0906108d39088908890612e76565b6040519081900381206001600160e01b031960e084901b1682526108fd9187908790600401612eaf565b602060405180830381600087803b15801561091757600080fd5b505af115801561092b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094f9190612ed2565b61099b5760405162461bcd60e51b815260206004820152601c60248201527f7369676e6572206e6f74207473732067726f757020707562206b65790000000060448201526064016104a6565b6109a481611eab565b7f9453459a6e9fa2069f1490c99cec15646afa157300f218a7f7840b23d09dbd3e816020015182606001516040516109dd929190612ef4565b60405180910390a150506001606555505050565b60026065541415610a145760405162461bcd60e51b81526004016104a690612d26565b600260655560005b6002811015610a9f576000609b8260028110610a3a57610a3a612cdf565b015411610a595760405162461bcd60e51b81526004016104a690612f2f565b6000609d8260028110610a6e57610a6e612cdf565b015411610a8d5760405162461bcd60e51b81526004016104a690612f66565b80610a9781612d0b565b915050610a1c565b5060008311610ae15760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b60448201526064016104a6565b609c5433600090815260996020526040902060020154610b02908590612faa565b1015610b505760405162461bcd60e51b815260206004820152601b60248201527f6e656564206465706f736974203e3d20736c617368416d6f756e74000000000060448201526064016104a6565b3360009081526099602052604081206001018054610b6d90612b00565b90501115610c95573360009081526099602052604090206001018054610c519190610b9790612b00565b80601f0160208091040260200160405190810160405280929190818152602001828054610bc390612b00565b8015610c105780601f10610be557610100808354040283529160200191610c10565b820191906000526020600020905b815481529060010190602001808311610bf357829003601f168201915b505050505083838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506104cf92505050565b610c905760405162461bcd60e51b815260206004820152601060248201526f1c1d5892d95e481b9bdd08195c5d585b60821b60448201526064016104a6565b610da9565b6098546040516310eb995b60e21b81526001600160a01b03909116906343ae656c90610cc79085908590600401612fc2565b602060405180830381600087803b158015610ce157600080fd5b505af1158015610cf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d199190612fde565b6001600160a01b0316336001600160a01b031614610d6a5760405162461bcd60e51b815260206004820152600e60248201526d696e76616c6964207075624b657960901b60448201526064016104a6565b336000908152609960205260409020610d8790600101838361246b565b5033600081815260996020526040902080546001600160a01b03191690911790555b6097546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd90606401602060405180830381600087803b158015610dfb57600080fd5b505af1158015610e0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e339190612ed2565b610e7f5760405162461bcd60e51b815260206004820152601b60248201527f7472616e7366657220657263323020746f6b656e206661696c6564000000000060448201526064016104a6565b3360009081526099602052604081206002018054859290610ea1908490612faa565b925050819055507f3183ac23cb0f1e36109abc28e6807d6282c166cb0a538cb5617024770fc73835336040518060600160405280336001600160a01b0316815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602001869052604051610f31929190612ffb565b60405180910390a15050600160655550565b60005b6002811015610fc9576000609b8260028110610f6457610f64612cdf565b015411610f835760405162461bcd60e51b81526004016104a690612f2f565b6000609d8260028110610f9857610f98612cdf565b015411610fb75760405162461bcd60e51b81526004016104a690612f66565b80610fc181612d0b565b915050610f46565b50609c543360009081526099602052604090206002015410156110255760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b60448201526064016104a6565b609854336000908152609960205260409081902090516310a7b12760e21b81526001600160a01b039092169163429ec49c9161106991600190910190600401612b3b565b600060405180830381600087803b15801561108357600080fd5b505af1158015611097573d6000803e3d6000fd5b50505050565b6110a5611df3565b6103bf6000612151565b600260655414156110d25760405162461bcd60e51b81526004016104a690612d26565b60026065819055336000908152609960205260409020015461112c5760405162461bcd60e51b8152602060048201526013602482015272191bc81b9bdd081a185d994819195c1bdcda5d606a1b60448201526064016104a6565b60985433600090815260996020526040908190209051630243371760e51b81526001600160a01b0390921691634866e2e09161117091600190910190600401612b3b565b602060405180830381600087803b15801561118a57600080fd5b505af115801561119e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c29190612ed2565b8061125e575060985433600090815260996020526040908190209051635e5e2fe360e11b81526001600160a01b039092169163bcbc5fc69161120c91600190910190600401612b3b565b602060405180830381600087803b15801561122657600080fd5b505af115801561123a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125e9190612ed2565b6112bc5760405162461bcd60e51b815260206004820152602960248201527f6e6f742061742074686520696e6163746976652067726f7570206f722061637460448201526806976652067726f75760bc1b60648201526084016104a6565b60005b609a5481101561135b57336001600160a01b0316609a82815481106112e6576112e6612cdf565b6000918252602090912001546001600160a01b031614156113495760405162461bcd60e51b815260206004820152601a60248201527f616c726561647920696e2071756974526571756573744c69737400000000000060448201526064016104a6565b8061135381612d0b565b9150506112bf565b50609a8054600181810183556000929092527f44da158ba27f9252712a74ff6a55c5d531f69609f1f6e7f17c4443a8e2089be40180546001600160a01b03191633179055606555565b606060008267ffffffffffffffff8111156113c1576113c1612591565b60405190808252806020026020018201604052801561141f57816020015b61140c604051806060016040528060006001600160a01b0316815260200160608152602001600081525090565b8152602001906001900390816113df5790505b50905060005b83811015611559576099600086868481811061144357611443612cdf565b9050602002016020810190611458919061256d565b6001600160a01b039081168252602080830193909352604091820160002082516060810190935280549091168252600181018054929391929184019161149d90612b00565b80601f01602080910402602001604051908101604052809291908181526020018280546114c990612b00565b80156115165780601f106114eb57610100808354040283529160200191611516565b820191906000526020600020905b8154815290600101906020018083116114f957829003601f168201915b5050505050815260200160028201548152505082828151811061153b5761153b612cdf565b6020026020010181905250808061155190612d0b565b915050611425565b509392505050565b61158e604051806060016040528060006001600160a01b0316815260200160608152602001600081525090565b6001600160a01b0380831660009081526099602090815260409182902082516060810190935280549093168252600183018054929392918401916115d190612b00565b80601f01602080910402602001604051908101604052809291908181526020018280546115fd90612b00565b801561164a5780601f1061161f5761010080835404028352916020019161164a565b820191906000526020600020905b81548152906001019060200180831161162d57829003601f168201915b505050505081526020016002820154815250509050919050565b61166c6124ef565b6116746124ef565b6040805180820191829052609b91609d9190839060029082845b81548152602001906001019080831161168e575050604080518082019182905294965085935060029250905082845b8154815260200190600101908083116116bd5750505050509050915091509091565b600260655414156117025760405162461bcd60e51b81526004016104a690612d26565b6002606581905533600090815260996020526040902001548061175d5760405162461bcd60e51b8152602060048201526013602482015272191bc81b9bdd081a185d994819195c1bdcda5d606a1b60448201526064016104a6565b336000908152609960205260408120600101805461177a90612b00565b80601f01602080910402602001604051908101604052809291908181526020018280546117a690612b00565b80156117f35780601f106117c8576101008083540402835291602001916117f3565b820191906000526020600020905b8154815290600101906020018083116117d657829003601f168201915b5050609854604051630243371760e51b81529495506001600160a01b031693634866e2e09350611829925085915060040161301f565b602060405180830381600087803b15801561184357600080fd5b505af1158015611857573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187b9190612ed2565b1580156119075750609854604051635e5e2fe360e11b81526001600160a01b039091169063bcbc5fc6906118b390849060040161301f565b602060405180830381600087803b1580156118cd57600080fd5b505af11580156118e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119059190612ed2565b155b61194b5760405162461bcd60e51b81526020600482015260156024820152746e6f74206174207468652072696768742074696d6560581b60448201526064016104a6565b33600090815260996020526040812080546001600160a01b031916815590611976600183018261250d565b5060006002919091015560975460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b1580156119cc57600080fd5b505af11580156119e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a049190612ed2565b611a485760405162461bcd60e51b8152602060048201526015602482015274195c98cc8c081d1c985b9cd9995c8819985a5b1959605a1b60448201526064016104a6565b60408051338152602081018490527f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364910160405180910390a150506001606555565b611a92611df3565b8135602083013511611afa5760405162461bcd60e51b815260206004820152602b60248201527f696e76616c696420706172616d20736c617368416d6f756e742c20616e696d7560448201526a73203c3d20757074696d6560a81b60648201526084016104a6565b8035602082013511611b5f5760405162461bcd60e51b815260206004820152602860248201527f696e76616c696420706172616d206578496e636f6d652c20616e696d7573203c6044820152673d20757074696d6560c01b60648201526084016104a6565b60005b60028110156106f6576000828260028110611b7f57611b7f612cdf565b602002013511611bc25760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b60448201526064016104a6565b818160028110611bd457611bd4612cdf565b6020020135838260028110611beb57611beb612cdf565b602002013511611c4b5760405162461bcd60e51b815260206004820152602560248201527f736c617368416d6f756e74206e65656420626967676572207468616e206578496044820152646e636f6d6560d81b60648201526084016104a6565b828160028110611c5d57611c5d612cdf565b6020020135609b8260028110611c7557611c75612cdf565b0155818160028110611c8957611c89612cdf565b6020020135609d8260028110611ca157611ca1612cdf565b015580611cad81612d0b565b915050611b62565b609b81600281106105a957600080fd5b611ccd611df3565b6001600160a01b038116611d325760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104a6565b611d3b81612151565b50565b609960205260009081526040902080546001820180546001600160a01b039092169291611d6a90612b00565b80601f0160208091040260200160405190810160405280929190818152602001828054611d9690612b00565b8015611de35780601f10611db857610100808354040283529160200191611de3565b820191906000526020600020905b815481529060010190602001808311611dc657829003601f168201915b5050505050908060020154905083565b6033546001600160a01b031633146103bf5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104a6565b600054610100900460ff16611e745760405162461bcd60e51b81526004016104a690613032565b6103bf6121a3565b600054610100900460ff16611ea35760405162461bcd60e51b81526004016104a690613032565b6103bf6121d3565b60005b6002811015611f31576000609b8260028110611ecc57611ecc612cdf565b015411611eeb5760405162461bcd60e51b81526004016104a690612f2f565b6000609d8260028110611f0057611f00612cdf565b015411611f1f5760405162461bcd60e51b81526004016104a690612f66565b80611f2981612d0b565b915050611eae565b506020808201516001600160a01b031660009081526099909152604081206001018054611f5d90612b00565b80601f0160208091040260200160405190810160405280929190818152602001828054611f8990612b00565b8015611fd65780601f10611fab57610100808354040283529160200191611fd6565b820191906000526020600020905b815481529060010190602001808311611fb957829003601f168201915b5093945060019350611fe792505050565b82606001516002811115611ffd57611ffd612cc9565b141561207d5760985460405163254ff98160e01b81526001600160a01b039091169063254ff9819061203390849060040161301f565b600060405180830381600087803b15801561204d57600080fd5b505af1158015612061573d6000803e3d6000fd5b50505050612079826020015160008460400151612201565b5050565b60028260600151600281111561209557612095612cc9565b141561211157609854604051637a952c1160e01b81526001600160a01b0390911690637a952c11906120cb90849060040161301f565b600060405180830381600087803b1580156120e557600080fd5b505af11580156120f9573d6000803e3d6000fd5b50505050612079826020015160018460400151612201565b60405162461bcd60e51b8152602060048201526015602482015274657272207479706520666f7220736c617368696e6760581b60448201526064016104a6565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166121ca5760405162461bcd60e51b81526004016104a690613032565b6103bf33612151565b600054610100900460ff166121fa5760405162461bcd60e51b81526004016104a690613032565b6001606555565b60008080808080609b886002811061221b5761221b612cdf565b01546001600160a01b038a1660009081526099602052604090206002015410156122875760405162461bcd60e51b815260206004820152601b60248201527f646f206e6f74206861766520656e6f75676874206465706f736974000000000060448201526064016104a6565b609b886002811061229a5761229a612cdf565b01549550609d88600281106122b1576122b1612cdf565b01546001600160a01b038a166000908152609960205260408120600201805492935088929091906122e390849061307d565b909155506122f39050818761307d565b935086518461230291906130aa565b8751909350612311848661307d565b61231b91906130be565b91506123278382612faa565b3360009081526099602052604081206002018054909190612349908490612faa565b90915550839050609d896002811061236357612363612cdf565b015461236f9190612faa565b945060005b87518110156123f2576123878387612faa565b955082609960008a84815181106123a0576123a0612cdf565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060020160008282546123da9190612faa565b909155508190506123ea81612d0b565b915050612374565b508585146124425760405162461bcd60e51b815260206004820152601860248201527f70616e69632c2063616c63756c6174696f6e206572726f72000000000000000060448201526064016104a6565b505050505050505050565b5080546000825590600052602060002090810190611d3b9190612543565b82805461247790612b00565b90600052602060002090601f01602090048101928261249957600085556124df565b82601f106124b25782800160ff198235161785556124df565b828001600101855582156124df579182015b828111156124df5782358255916020019190600101906124c4565b506124eb929150612543565b5090565b60405180604001604052806002906020820280368337509192915050565b50805461251990612b00565b6000825580601f10612529575050565b601f016020900490600052602060002090810190611d3b91905b5b808211156124eb5760008155600101612544565b6001600160a01b0381168114611d3b57600080fd5b60006020828403121561257f57600080fd5b813561258a81612558565b9392505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156125ca576125ca612591565b60405290565b6040516080810167ffffffffffffffff811182821017156125ca576125ca612591565b604051601f8201601f1916810167ffffffffffffffff8111828210171561261c5761261c612591565b604052919050565b600067ffffffffffffffff82111561263e5761263e612591565b50601f01601f191660200190565b600082601f83011261265d57600080fd5b813561267061266b82612624565b6125f3565b81815284602083860101111561268557600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156126b557600080fd5b823567ffffffffffffffff808211156126cd57600080fd5b6126d98683870161264c565b935060208501359150808211156126ef57600080fd5b506126fc8582860161264c565b9150509250929050565b6000806040838503121561271957600080fd5b823561272481612558565b9150602083013561273481612558565b809150509250929050565b60006020828403121561275157600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156127995783516001600160a01b031683529284019291840191600101612774565b50909695505050505050565b60008083601f8401126127b757600080fd5b50813567ffffffffffffffff8111156127cf57600080fd5b6020830191508360208285010111156127e757600080fd5b9250929050565b6000806000806040858703121561280457600080fd5b843567ffffffffffffffff8082111561281c57600080fd5b612828888389016127a5565b9096509450602087013591508082111561284157600080fd5b5061284e878288016127a5565b95989497509550505050565b60008060006040848603121561286f57600080fd5b83359250602084013567ffffffffffffffff81111561288d57600080fd5b612899868287016127a5565b9497909650939450505050565b600080602083850312156128b957600080fd5b823567ffffffffffffffff808211156128d157600080fd5b818501915085601f8301126128e557600080fd5b8135818111156128f457600080fd5b8660208260051b850101111561290957600080fd5b60209290920196919550909350505050565b60005b8381101561293657818101518382015260200161291e565b838111156110975750506000910152565b6000815180845261295f81602086016020860161291b565b601f01601f19169290920160200192915050565b60018060a01b038151168252600060208201516060602085015261299a6060850182612947565b604093840151949093019390935250919050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612a0357603f198886030184526129f1858351612973565b945092850192908501906001016129d5565b5092979650505050505050565b60008060408385031215612a2357600080fd5b82359150602083013561273481612558565b60208152600061258a6020830184612973565b8060005b6002811015611097578151845260209384019390910190600101612a4c565b60808101612a798285612a48565b61258a6040830184612a48565b806040810183101561055d57600080fd5b60008060808385031215612aaa57600080fd5b612ab48484612a86565b9150612ac38460408501612a86565b90509250929050565b6001600160a01b0384168152606060208201819052600090612af090830185612947565b9050826040830152949350505050565b600181811c90821680612b1457607f821691505b60208210811415612b3557634e487b7160e01b600052602260045260246000fd5b50919050565b600060208083526000845481600182811c915080831680612b5d57607f831692505b858310811415612b7b57634e487b7160e01b85526022600452602485fd5b878601838152602001818015612b985760018114612ba957612bd4565b60ff19861682528782019650612bd4565b60008b81526020902060005b86811015612bce57815484820152908501908901612bb5565b83019750505b50949998505050505050505050565b8051612bee81612558565b919050565b805160028110612bee57600080fd5b60006020808385031215612c1557600080fd5b825167ffffffffffffffff80821115612c2d57600080fd5b9084019060608287031215612c4157600080fd5b612c496125a7565b825182811115612c5857600080fd5b83019150601f82018713612c6b57600080fd5b8151612c7961266b82612624565b8181528886838601011115612c8d57600080fd5b612c9c8287830188870161291b565b825250612caa838501612be3565b84820152612cba60408401612bf3565b60408201529695505050505050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612d1f57612d1f612cf5565b5060010190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b803560038110612bee57600080fd5b60006020808385031215612d7f57600080fd5b823567ffffffffffffffff80821115612d9757600080fd5b9084019060808287031215612dab57600080fd5b612db36125d0565b8235815283830135612dc481612558565b81850152604083013582811115612dda57600080fd5b8301601f81018813612deb57600080fd5b803583811115612dfd57612dfd612591565b8060051b9350612e0e8685016125f3565b818152938201860193868101908a861115612e2857600080fd5b928701925b85841015612e525783359250612e4283612558565b8282529287019290870190612e2d565b604085015250612e6791505060608401612d5d565b60608201529695505050505050565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b838152604060208201526000612ec9604083018486612e86565b95945050505050565b600060208284031215612ee457600080fd5b8151801515811461258a57600080fd5b6001600160a01b03831681526040810160038310612f2257634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b6020808252601d908201527f68617665206e6f74207365742074686520736c61736820616d6f756e74000000604082015260600190565b60208082526024908201527f68617665206e6f74207365742074686520657874726120696e636f6d6520616d6040820152631bdd5b9d60e21b606082015260800190565b60008219821115612fbd57612fbd612cf5565b500190565b602081526000612fd6602083018486612e86565b949350505050565b600060208284031215612ff057600080fd5b815161258a81612558565b6001600160a01b0383168152604060208201819052600090612fd690830184612973565b60208152600061258a6020830184612947565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008282101561308f5761308f612cf5565b500390565b634e487b7160e01b600052601260045260246000fd5b6000826130b9576130b9613094565b500690565b6000826130cd576130cd613094565b50049056fea264697066735822122001b203cd44eb1dbc163666b27ac343a587e5370e51c5dc24b2fe5af2abdfdf6764736f6c63430008090033",
}

// TssStakingSlashingABI is the input ABI used to generate the binding from.
// Deprecated: Use TssStakingSlashingMetaData.ABI instead.
var TssStakingSlashingABI = TssStakingSlashingMetaData.ABI

// TssStakingSlashingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TssStakingSlashingMetaData.Bin instead.
var TssStakingSlashingBin = TssStakingSlashingMetaData.Bin

// DeployTssStakingSlashing deploys a new Ethereum contract, binding an instance of TssStakingSlashing to it.
func DeployTssStakingSlashing(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TssStakingSlashing, error) {
	parsed, err := TssStakingSlashingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TssStakingSlashingBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TssStakingSlashing{TssStakingSlashingCaller: TssStakingSlashingCaller{contract: contract}, TssStakingSlashingTransactor: TssStakingSlashingTransactor{contract: contract}, TssStakingSlashingFilterer: TssStakingSlashingFilterer{contract: contract}}, nil
}

// TssStakingSlashing is an auto generated Go binding around an Ethereum contract.
type TssStakingSlashing struct {
	TssStakingSlashingCaller     // Read-only binding to the contract
	TssStakingSlashingTransactor // Write-only binding to the contract
	TssStakingSlashingFilterer   // Log filterer for contract events
}

// TssStakingSlashingCaller is an auto generated read-only Go binding around an Ethereum contract.
type TssStakingSlashingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TssStakingSlashingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TssStakingSlashingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TssStakingSlashingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TssStakingSlashingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TssStakingSlashingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TssStakingSlashingSession struct {
	Contract     *TssStakingSlashing // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// TssStakingSlashingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TssStakingSlashingCallerSession struct {
	Contract *TssStakingSlashingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// TssStakingSlashingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TssStakingSlashingTransactorSession struct {
	Contract     *TssStakingSlashingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// TssStakingSlashingRaw is an auto generated low-level Go binding around an Ethereum contract.
type TssStakingSlashingRaw struct {
	Contract *TssStakingSlashing // Generic contract binding to access the raw methods on
}

// TssStakingSlashingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TssStakingSlashingCallerRaw struct {
	Contract *TssStakingSlashingCaller // Generic read-only contract binding to access the raw methods on
}

// TssStakingSlashingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TssStakingSlashingTransactorRaw struct {
	Contract *TssStakingSlashingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTssStakingSlashing creates a new instance of TssStakingSlashing, bound to a specific deployed contract.
func NewTssStakingSlashing(address common.Address, backend bind.ContractBackend) (*TssStakingSlashing, error) {
	contract, err := bindTssStakingSlashing(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashing{TssStakingSlashingCaller: TssStakingSlashingCaller{contract: contract}, TssStakingSlashingTransactor: TssStakingSlashingTransactor{contract: contract}, TssStakingSlashingFilterer: TssStakingSlashingFilterer{contract: contract}}, nil
}

// NewTssStakingSlashingCaller creates a new read-only instance of TssStakingSlashing, bound to a specific deployed contract.
func NewTssStakingSlashingCaller(address common.Address, caller bind.ContractCaller) (*TssStakingSlashingCaller, error) {
	contract, err := bindTssStakingSlashing(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingCaller{contract: contract}, nil
}

// NewTssStakingSlashingTransactor creates a new write-only instance of TssStakingSlashing, bound to a specific deployed contract.
func NewTssStakingSlashingTransactor(address common.Address, transactor bind.ContractTransactor) (*TssStakingSlashingTransactor, error) {
	contract, err := bindTssStakingSlashing(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingTransactor{contract: contract}, nil
}

// NewTssStakingSlashingFilterer creates a new log filterer instance of TssStakingSlashing, bound to a specific deployed contract.
func NewTssStakingSlashingFilterer(address common.Address, filterer bind.ContractFilterer) (*TssStakingSlashingFilterer, error) {
	contract, err := bindTssStakingSlashing(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingFilterer{contract: contract}, nil
}

// bindTssStakingSlashing binds a generic wrapper to an already deployed contract.
func bindTssStakingSlashing(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TssStakingSlashingMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TssStakingSlashing *TssStakingSlashingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TssStakingSlashing.Contract.TssStakingSlashingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TssStakingSlashing *TssStakingSlashingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.TssStakingSlashingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TssStakingSlashing *TssStakingSlashingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.TssStakingSlashingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TssStakingSlashing *TssStakingSlashingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TssStakingSlashing.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TssStakingSlashing *TssStakingSlashingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TssStakingSlashing *TssStakingSlashingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.contract.Transact(opts, method, params...)
}

// MantleToken is a free data retrieval call binding the contract method 0x80f3c106.
//
// Solidity: function MantleToken() view returns(address)
func (_TssStakingSlashing *TssStakingSlashingCaller) MantleToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "MantleToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MantleToken is a free data retrieval call binding the contract method 0x80f3c106.
//
// Solidity: function MantleToken() view returns(address)
func (_TssStakingSlashing *TssStakingSlashingSession) MantleToken() (common.Address, error) {
	return _TssStakingSlashing.Contract.MantleToken(&_TssStakingSlashing.CallOpts)
}

// MantleToken is a free data retrieval call binding the contract method 0x80f3c106.
//
// Solidity: function MantleToken() view returns(address)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) MantleToken() (common.Address, error) {
	return _TssStakingSlashing.Contract.MantleToken(&_TssStakingSlashing.CallOpts)
}

// BatchGetDeposits is a free data retrieval call binding the contract method 0x793505c8.
//
// Solidity: function batchGetDeposits(address[] users) view returns((address,bytes,uint256)[])
func (_TssStakingSlashing *TssStakingSlashingCaller) BatchGetDeposits(opts *bind.CallOpts, users []common.Address) ([]IStakingSlashingDepositInfo, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "batchGetDeposits", users)

	if err != nil {
		return *new([]IStakingSlashingDepositInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]IStakingSlashingDepositInfo)).(*[]IStakingSlashingDepositInfo)

	return out0, err

}

// BatchGetDeposits is a free data retrieval call binding the contract method 0x793505c8.
//
// Solidity: function batchGetDeposits(address[] users) view returns((address,bytes,uint256)[])
func (_TssStakingSlashing *TssStakingSlashingSession) BatchGetDeposits(users []common.Address) ([]IStakingSlashingDepositInfo, error) {
	return _TssStakingSlashing.Contract.BatchGetDeposits(&_TssStakingSlashing.CallOpts, users)
}

// BatchGetDeposits is a free data retrieval call binding the contract method 0x793505c8.
//
// Solidity: function batchGetDeposits(address[] users) view returns((address,bytes,uint256)[])
func (_TssStakingSlashing *TssStakingSlashingCallerSession) BatchGetDeposits(users []common.Address) ([]IStakingSlashingDepositInfo, error) {
	return _TssStakingSlashing.Contract.BatchGetDeposits(&_TssStakingSlashing.CallOpts, users)
}

// Deposits is a free data retrieval call binding the contract method 0xfc7e286d.
//
// Solidity: function deposits(address ) view returns(address pledgor, bytes pubKey, uint256 amount)
func (_TssStakingSlashing *TssStakingSlashingCaller) Deposits(opts *bind.CallOpts, arg0 common.Address) (struct {
	Pledgor common.Address
	PubKey  []byte
	Amount  *big.Int
}, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "deposits", arg0)

	outstruct := new(struct {
		Pledgor common.Address
		PubKey  []byte
		Amount  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Pledgor = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.PubKey = *abi.ConvertType(out[1], new([]byte)).(*[]byte)
	outstruct.Amount = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Deposits is a free data retrieval call binding the contract method 0xfc7e286d.
//
// Solidity: function deposits(address ) view returns(address pledgor, bytes pubKey, uint256 amount)
func (_TssStakingSlashing *TssStakingSlashingSession) Deposits(arg0 common.Address) (struct {
	Pledgor common.Address
	PubKey  []byte
	Amount  *big.Int
}, error) {
	return _TssStakingSlashing.Contract.Deposits(&_TssStakingSlashing.CallOpts, arg0)
}

// Deposits is a free data retrieval call binding the contract method 0xfc7e286d.
//
// Solidity: function deposits(address ) view returns(address pledgor, bytes pubKey, uint256 amount)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) Deposits(arg0 common.Address) (struct {
	Pledgor common.Address
	PubKey  []byte
	Amount  *big.Int
}, error) {
	return _TssStakingSlashing.Contract.Deposits(&_TssStakingSlashing.CallOpts, arg0)
}

// ExIncome is a free data retrieval call binding the contract method 0x3f950438.
//
// Solidity: function exIncome(uint256 ) view returns(uint256)
func (_TssStakingSlashing *TssStakingSlashingCaller) ExIncome(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "exIncome", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ExIncome is a free data retrieval call binding the contract method 0x3f950438.
//
// Solidity: function exIncome(uint256 ) view returns(uint256)
func (_TssStakingSlashing *TssStakingSlashingSession) ExIncome(arg0 *big.Int) (*big.Int, error) {
	return _TssStakingSlashing.Contract.ExIncome(&_TssStakingSlashing.CallOpts, arg0)
}

// ExIncome is a free data retrieval call binding the contract method 0x3f950438.
//
// Solidity: function exIncome(uint256 ) view returns(uint256)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) ExIncome(arg0 *big.Int) (*big.Int, error) {
	return _TssStakingSlashing.Contract.ExIncome(&_TssStakingSlashing.CallOpts, arg0)
}

// GetDeposits is a free data retrieval call binding the contract method 0x94f649dd.
//
// Solidity: function getDeposits(address user) view returns((address,bytes,uint256))
func (_TssStakingSlashing *TssStakingSlashingCaller) GetDeposits(opts *bind.CallOpts, user common.Address) (IStakingSlashingDepositInfo, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "getDeposits", user)

	if err != nil {
		return *new(IStakingSlashingDepositInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(IStakingSlashingDepositInfo)).(*IStakingSlashingDepositInfo)

	return out0, err

}

// GetDeposits is a free data retrieval call binding the contract method 0x94f649dd.
//
// Solidity: function getDeposits(address user) view returns((address,bytes,uint256))
func (_TssStakingSlashing *TssStakingSlashingSession) GetDeposits(user common.Address) (IStakingSlashingDepositInfo, error) {
	return _TssStakingSlashing.Contract.GetDeposits(&_TssStakingSlashing.CallOpts, user)
}

// GetDeposits is a free data retrieval call binding the contract method 0x94f649dd.
//
// Solidity: function getDeposits(address user) view returns((address,bytes,uint256))
func (_TssStakingSlashing *TssStakingSlashingCallerSession) GetDeposits(user common.Address) (IStakingSlashingDepositInfo, error) {
	return _TssStakingSlashing.Contract.GetDeposits(&_TssStakingSlashing.CallOpts, user)
}

// GetQuitRequestList is a free data retrieval call binding the contract method 0x490ab9d6.
//
// Solidity: function getQuitRequestList() view returns(address[])
func (_TssStakingSlashing *TssStakingSlashingCaller) GetQuitRequestList(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "getQuitRequestList")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetQuitRequestList is a free data retrieval call binding the contract method 0x490ab9d6.
//
// Solidity: function getQuitRequestList() view returns(address[])
func (_TssStakingSlashing *TssStakingSlashingSession) GetQuitRequestList() ([]common.Address, error) {
	return _TssStakingSlashing.Contract.GetQuitRequestList(&_TssStakingSlashing.CallOpts)
}

// GetQuitRequestList is a free data retrieval call binding the contract method 0x490ab9d6.
//
// Solidity: function getQuitRequestList() view returns(address[])
func (_TssStakingSlashing *TssStakingSlashingCallerSession) GetQuitRequestList() ([]common.Address, error) {
	return _TssStakingSlashing.Contract.GetQuitRequestList(&_TssStakingSlashing.CallOpts)
}

// GetSlashRecord is a free data retrieval call binding the contract method 0x829673ef.
//
// Solidity: function getSlashRecord(uint256 batchIndex, address user) view returns(bool)
func (_TssStakingSlashing *TssStakingSlashingCaller) GetSlashRecord(opts *bind.CallOpts, batchIndex *big.Int, user common.Address) (bool, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "getSlashRecord", batchIndex, user)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetSlashRecord is a free data retrieval call binding the contract method 0x829673ef.
//
// Solidity: function getSlashRecord(uint256 batchIndex, address user) view returns(bool)
func (_TssStakingSlashing *TssStakingSlashingSession) GetSlashRecord(batchIndex *big.Int, user common.Address) (bool, error) {
	return _TssStakingSlashing.Contract.GetSlashRecord(&_TssStakingSlashing.CallOpts, batchIndex, user)
}

// GetSlashRecord is a free data retrieval call binding the contract method 0x829673ef.
//
// Solidity: function getSlashRecord(uint256 batchIndex, address user) view returns(bool)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) GetSlashRecord(batchIndex *big.Int, user common.Address) (bool, error) {
	return _TssStakingSlashing.Contract.GetSlashRecord(&_TssStakingSlashing.CallOpts, batchIndex, user)
}

// GetSlashingParams is a free data retrieval call binding the contract method 0xb3fc1cb2.
//
// Solidity: function getSlashingParams() view returns(uint256[2], uint256[2])
func (_TssStakingSlashing *TssStakingSlashingCaller) GetSlashingParams(opts *bind.CallOpts) ([2]*big.Int, [2]*big.Int, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "getSlashingParams")

	if err != nil {
		return *new([2]*big.Int), *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)
	out1 := *abi.ConvertType(out[1], new([2]*big.Int)).(*[2]*big.Int)

	return out0, out1, err

}

// GetSlashingParams is a free data retrieval call binding the contract method 0xb3fc1cb2.
//
// Solidity: function getSlashingParams() view returns(uint256[2], uint256[2])
func (_TssStakingSlashing *TssStakingSlashingSession) GetSlashingParams() ([2]*big.Int, [2]*big.Int, error) {
	return _TssStakingSlashing.Contract.GetSlashingParams(&_TssStakingSlashing.CallOpts)
}

// GetSlashingParams is a free data retrieval call binding the contract method 0xb3fc1cb2.
//
// Solidity: function getSlashingParams() view returns(uint256[2], uint256[2])
func (_TssStakingSlashing *TssStakingSlashingCallerSession) GetSlashingParams() ([2]*big.Int, [2]*big.Int, error) {
	return _TssStakingSlashing.Contract.GetSlashingParams(&_TssStakingSlashing.CallOpts)
}

// IsEqual is a free data retrieval call binding the contract method 0x34359808.
//
// Solidity: function isEqual(bytes byteListA, bytes byteListB) pure returns(bool)
func (_TssStakingSlashing *TssStakingSlashingCaller) IsEqual(opts *bind.CallOpts, byteListA []byte, byteListB []byte) (bool, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "isEqual", byteListA, byteListB)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsEqual is a free data retrieval call binding the contract method 0x34359808.
//
// Solidity: function isEqual(bytes byteListA, bytes byteListB) pure returns(bool)
func (_TssStakingSlashing *TssStakingSlashingSession) IsEqual(byteListA []byte, byteListB []byte) (bool, error) {
	return _TssStakingSlashing.Contract.IsEqual(&_TssStakingSlashing.CallOpts, byteListA, byteListB)
}

// IsEqual is a free data retrieval call binding the contract method 0x34359808.
//
// Solidity: function isEqual(bytes byteListA, bytes byteListB) pure returns(bool)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) IsEqual(byteListA []byte, byteListB []byte) (bool, error) {
	return _TssStakingSlashing.Contract.IsEqual(&_TssStakingSlashing.CallOpts, byteListA, byteListB)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TssStakingSlashing *TssStakingSlashingCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TssStakingSlashing *TssStakingSlashingSession) Owner() (common.Address, error) {
	return _TssStakingSlashing.Contract.Owner(&_TssStakingSlashing.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) Owner() (common.Address, error) {
	return _TssStakingSlashing.Contract.Owner(&_TssStakingSlashing.CallOpts)
}

// QuitRequestList is a free data retrieval call binding the contract method 0x57b0f05f.
//
// Solidity: function quitRequestList(uint256 ) view returns(address)
func (_TssStakingSlashing *TssStakingSlashingCaller) QuitRequestList(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "quitRequestList", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// QuitRequestList is a free data retrieval call binding the contract method 0x57b0f05f.
//
// Solidity: function quitRequestList(uint256 ) view returns(address)
func (_TssStakingSlashing *TssStakingSlashingSession) QuitRequestList(arg0 *big.Int) (common.Address, error) {
	return _TssStakingSlashing.Contract.QuitRequestList(&_TssStakingSlashing.CallOpts, arg0)
}

// QuitRequestList is a free data retrieval call binding the contract method 0x57b0f05f.
//
// Solidity: function quitRequestList(uint256 ) view returns(address)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) QuitRequestList(arg0 *big.Int) (common.Address, error) {
	return _TssStakingSlashing.Contract.QuitRequestList(&_TssStakingSlashing.CallOpts, arg0)
}

// SlashAmount is a free data retrieval call binding the contract method 0xf2bd7400.
//
// Solidity: function slashAmount(uint256 ) view returns(uint256)
func (_TssStakingSlashing *TssStakingSlashingCaller) SlashAmount(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "slashAmount", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SlashAmount is a free data retrieval call binding the contract method 0xf2bd7400.
//
// Solidity: function slashAmount(uint256 ) view returns(uint256)
func (_TssStakingSlashing *TssStakingSlashingSession) SlashAmount(arg0 *big.Int) (*big.Int, error) {
	return _TssStakingSlashing.Contract.SlashAmount(&_TssStakingSlashing.CallOpts, arg0)
}

// SlashAmount is a free data retrieval call binding the contract method 0xf2bd7400.
//
// Solidity: function slashAmount(uint256 ) view returns(uint256)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) SlashAmount(arg0 *big.Int) (*big.Int, error) {
	return _TssStakingSlashing.Contract.SlashAmount(&_TssStakingSlashing.CallOpts, arg0)
}

// TssGroupContract is a free data retrieval call binding the contract method 0xd323041d.
//
// Solidity: function tssGroupContract() view returns(address)
func (_TssStakingSlashing *TssStakingSlashingCaller) TssGroupContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "tssGroupContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TssGroupContract is a free data retrieval call binding the contract method 0xd323041d.
//
// Solidity: function tssGroupContract() view returns(address)
func (_TssStakingSlashing *TssStakingSlashingSession) TssGroupContract() (common.Address, error) {
	return _TssStakingSlashing.Contract.TssGroupContract(&_TssStakingSlashing.CallOpts)
}

// TssGroupContract is a free data retrieval call binding the contract method 0xd323041d.
//
// Solidity: function tssGroupContract() view returns(address)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) TssGroupContract() (common.Address, error) {
	return _TssStakingSlashing.Contract.TssGroupContract(&_TssStakingSlashing.CallOpts)
}

// ClearQuitRequestList is a paid mutator transaction binding the contract method 0x111b8c02.
//
// Solidity: function clearQuitRequestList() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) ClearQuitRequestList(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "clearQuitRequestList")
}

// ClearQuitRequestList is a paid mutator transaction binding the contract method 0x111b8c02.
//
// Solidity: function clearQuitRequestList() returns()
func (_TssStakingSlashing *TssStakingSlashingSession) ClearQuitRequestList() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.ClearQuitRequestList(&_TssStakingSlashing.TransactOpts)
}

// ClearQuitRequestList is a paid mutator transaction binding the contract method 0x111b8c02.
//
// Solidity: function clearQuitRequestList() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) ClearQuitRequestList() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.ClearQuitRequestList(&_TssStakingSlashing.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _mantleToken, address _tssGroupContract) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) Initialize(opts *bind.TransactOpts, _mantleToken common.Address, _tssGroupContract common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "initialize", _mantleToken, _tssGroupContract)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _mantleToken, address _tssGroupContract) returns()
func (_TssStakingSlashing *TssStakingSlashingSession) Initialize(_mantleToken common.Address, _tssGroupContract common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.Initialize(&_TssStakingSlashing.TransactOpts, _mantleToken, _tssGroupContract)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _mantleToken, address _tssGroupContract) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) Initialize(_mantleToken common.Address, _tssGroupContract common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.Initialize(&_TssStakingSlashing.TransactOpts, _mantleToken, _tssGroupContract)
}

// IsJailed is a paid mutator transaction binding the contract method 0x14bfb527.
//
// Solidity: function isJailed(address user) returns(bool)
func (_TssStakingSlashing *TssStakingSlashingTransactor) IsJailed(opts *bind.TransactOpts, user common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "isJailed", user)
}

// IsJailed is a paid mutator transaction binding the contract method 0x14bfb527.
//
// Solidity: function isJailed(address user) returns(bool)
func (_TssStakingSlashing *TssStakingSlashingSession) IsJailed(user common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.IsJailed(&_TssStakingSlashing.TransactOpts, user)
}

// IsJailed is a paid mutator transaction binding the contract method 0x14bfb527.
//
// Solidity: function isJailed(address user) returns(bool)
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) IsJailed(user common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.IsJailed(&_TssStakingSlashing.TransactOpts, user)
}

// QuitRequest is a paid mutator transaction binding the contract method 0x740efec3.
//
// Solidity: function quitRequest() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) QuitRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "quitRequest")
}

// QuitRequest is a paid mutator transaction binding the contract method 0x740efec3.
//
// Solidity: function quitRequest() returns()
func (_TssStakingSlashing *TssStakingSlashingSession) QuitRequest() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.QuitRequest(&_TssStakingSlashing.TransactOpts)
}

// QuitRequest is a paid mutator transaction binding the contract method 0x740efec3.
//
// Solidity: function quitRequest() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) QuitRequest() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.QuitRequest(&_TssStakingSlashing.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TssStakingSlashing *TssStakingSlashingSession) RenounceOwnership() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.RenounceOwnership(&_TssStakingSlashing.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.RenounceOwnership(&_TssStakingSlashing.TransactOpts)
}

// SetAddress is a paid mutator transaction binding the contract method 0x3b58524d.
//
// Solidity: function setAddress(address _token, address _tssGroup) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) SetAddress(opts *bind.TransactOpts, _token common.Address, _tssGroup common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "setAddress", _token, _tssGroup)
}

// SetAddress is a paid mutator transaction binding the contract method 0x3b58524d.
//
// Solidity: function setAddress(address _token, address _tssGroup) returns()
func (_TssStakingSlashing *TssStakingSlashingSession) SetAddress(_token common.Address, _tssGroup common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.SetAddress(&_TssStakingSlashing.TransactOpts, _token, _tssGroup)
}

// SetAddress is a paid mutator transaction binding the contract method 0x3b58524d.
//
// Solidity: function setAddress(address _token, address _tssGroup) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) SetAddress(_token common.Address, _tssGroup common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.SetAddress(&_TssStakingSlashing.TransactOpts, _token, _tssGroup)
}

// SetSlashingParams is a paid mutator transaction binding the contract method 0xde6fb88a.
//
// Solidity: function setSlashingParams(uint256[2] _slashAmount, uint256[2] _exIncome) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) SetSlashingParams(opts *bind.TransactOpts, _slashAmount [2]*big.Int, _exIncome [2]*big.Int) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "setSlashingParams", _slashAmount, _exIncome)
}

// SetSlashingParams is a paid mutator transaction binding the contract method 0xde6fb88a.
//
// Solidity: function setSlashingParams(uint256[2] _slashAmount, uint256[2] _exIncome) returns()
func (_TssStakingSlashing *TssStakingSlashingSession) SetSlashingParams(_slashAmount [2]*big.Int, _exIncome [2]*big.Int) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.SetSlashingParams(&_TssStakingSlashing.TransactOpts, _slashAmount, _exIncome)
}

// SetSlashingParams is a paid mutator transaction binding the contract method 0xde6fb88a.
//
// Solidity: function setSlashingParams(uint256[2] _slashAmount, uint256[2] _exIncome) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) SetSlashingParams(_slashAmount [2]*big.Int, _exIncome [2]*big.Int) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.SetSlashingParams(&_TssStakingSlashing.TransactOpts, _slashAmount, _exIncome)
}

// Slashing is a paid mutator transaction binding the contract method 0x5887c33c.
//
// Solidity: function slashing(bytes _messageBytes, bytes _sig) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) Slashing(opts *bind.TransactOpts, _messageBytes []byte, _sig []byte) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "slashing", _messageBytes, _sig)
}

// Slashing is a paid mutator transaction binding the contract method 0x5887c33c.
//
// Solidity: function slashing(bytes _messageBytes, bytes _sig) returns()
func (_TssStakingSlashing *TssStakingSlashingSession) Slashing(_messageBytes []byte, _sig []byte) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.Slashing(&_TssStakingSlashing.TransactOpts, _messageBytes, _sig)
}

// Slashing is a paid mutator transaction binding the contract method 0x5887c33c.
//
// Solidity: function slashing(bytes _messageBytes, bytes _sig) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) Slashing(_messageBytes []byte, _sig []byte) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.Slashing(&_TssStakingSlashing.TransactOpts, _messageBytes, _sig)
}

// Staking is a paid mutator transaction binding the contract method 0x5df6db49.
//
// Solidity: function staking(uint256 _amount, bytes _pubKey) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) Staking(opts *bind.TransactOpts, _amount *big.Int, _pubKey []byte) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "staking", _amount, _pubKey)
}

// Staking is a paid mutator transaction binding the contract method 0x5df6db49.
//
// Solidity: function staking(uint256 _amount, bytes _pubKey) returns()
func (_TssStakingSlashing *TssStakingSlashingSession) Staking(_amount *big.Int, _pubKey []byte) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.Staking(&_TssStakingSlashing.TransactOpts, _amount, _pubKey)
}

// Staking is a paid mutator transaction binding the contract method 0x5df6db49.
//
// Solidity: function staking(uint256 _amount, bytes _pubKey) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) Staking(_amount *big.Int, _pubKey []byte) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.Staking(&_TssStakingSlashing.TransactOpts, _amount, _pubKey)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TssStakingSlashing *TssStakingSlashingSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.TransferOwnership(&_TssStakingSlashing.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.TransferOwnership(&_TssStakingSlashing.TransactOpts, newOwner)
}

// UnJail is a paid mutator transaction binding the contract method 0x6eae5b11.
//
// Solidity: function unJail() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) UnJail(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "unJail")
}

// UnJail is a paid mutator transaction binding the contract method 0x6eae5b11.
//
// Solidity: function unJail() returns()
func (_TssStakingSlashing *TssStakingSlashingSession) UnJail() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.UnJail(&_TssStakingSlashing.TransactOpts)
}

// UnJail is a paid mutator transaction binding the contract method 0x6eae5b11.
//
// Solidity: function unJail() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) UnJail() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.UnJail(&_TssStakingSlashing.TransactOpts)
}

// WithdrawToken is a paid mutator transaction binding the contract method 0xca628c78.
//
// Solidity: function withdrawToken() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) WithdrawToken(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "withdrawToken")
}

// WithdrawToken is a paid mutator transaction binding the contract method 0xca628c78.
//
// Solidity: function withdrawToken() returns()
func (_TssStakingSlashing *TssStakingSlashingSession) WithdrawToken() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.WithdrawToken(&_TssStakingSlashing.TransactOpts)
}

// WithdrawToken is a paid mutator transaction binding the contract method 0xca628c78.
//
// Solidity: function withdrawToken() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) WithdrawToken() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.WithdrawToken(&_TssStakingSlashing.TransactOpts)
}

// TssStakingSlashingAddDepositIterator is returned from FilterAddDeposit and is used to iterate over the raw logs and unpacked data for AddDeposit events raised by the TssStakingSlashing contract.
type TssStakingSlashingAddDepositIterator struct {
	Event *TssStakingSlashingAddDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TssStakingSlashingAddDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TssStakingSlashingAddDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TssStakingSlashingAddDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TssStakingSlashingAddDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TssStakingSlashingAddDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TssStakingSlashingAddDeposit represents a AddDeposit event raised by the TssStakingSlashing contract.
type TssStakingSlashingAddDeposit struct {
	Arg0 common.Address
	Arg1 IStakingSlashingDepositInfo
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterAddDeposit is a free log retrieval operation binding the contract event 0x3183ac23cb0f1e36109abc28e6807d6282c166cb0a538cb5617024770fc73835.
//
// Solidity: event AddDeposit(address arg0, (address,bytes,uint256) arg1)
func (_TssStakingSlashing *TssStakingSlashingFilterer) FilterAddDeposit(opts *bind.FilterOpts) (*TssStakingSlashingAddDepositIterator, error) {

	logs, sub, err := _TssStakingSlashing.contract.FilterLogs(opts, "AddDeposit")
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingAddDepositIterator{contract: _TssStakingSlashing.contract, event: "AddDeposit", logs: logs, sub: sub}, nil
}

// WatchAddDeposit is a free log subscription operation binding the contract event 0x3183ac23cb0f1e36109abc28e6807d6282c166cb0a538cb5617024770fc73835.
//
// Solidity: event AddDeposit(address arg0, (address,bytes,uint256) arg1)
func (_TssStakingSlashing *TssStakingSlashingFilterer) WatchAddDeposit(opts *bind.WatchOpts, sink chan<- *TssStakingSlashingAddDeposit) (event.Subscription, error) {

	logs, sub, err := _TssStakingSlashing.contract.WatchLogs(opts, "AddDeposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TssStakingSlashingAddDeposit)
				if err := _TssStakingSlashing.contract.UnpackLog(event, "AddDeposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddDeposit is a log parse operation binding the contract event 0x3183ac23cb0f1e36109abc28e6807d6282c166cb0a538cb5617024770fc73835.
//
// Solidity: event AddDeposit(address arg0, (address,bytes,uint256) arg1)
func (_TssStakingSlashing *TssStakingSlashingFilterer) ParseAddDeposit(log types.Log) (*TssStakingSlashingAddDeposit, error) {
	event := new(TssStakingSlashingAddDeposit)
	if err := _TssStakingSlashing.contract.UnpackLog(event, "AddDeposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TssStakingSlashingInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the TssStakingSlashing contract.
type TssStakingSlashingInitializedIterator struct {
	Event *TssStakingSlashingInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TssStakingSlashingInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TssStakingSlashingInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TssStakingSlashingInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TssStakingSlashingInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TssStakingSlashingInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TssStakingSlashingInitialized represents a Initialized event raised by the TssStakingSlashing contract.
type TssStakingSlashingInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_TssStakingSlashing *TssStakingSlashingFilterer) FilterInitialized(opts *bind.FilterOpts) (*TssStakingSlashingInitializedIterator, error) {

	logs, sub, err := _TssStakingSlashing.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingInitializedIterator{contract: _TssStakingSlashing.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_TssStakingSlashing *TssStakingSlashingFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *TssStakingSlashingInitialized) (event.Subscription, error) {

	logs, sub, err := _TssStakingSlashing.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TssStakingSlashingInitialized)
				if err := _TssStakingSlashing.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_TssStakingSlashing *TssStakingSlashingFilterer) ParseInitialized(log types.Log) (*TssStakingSlashingInitialized, error) {
	event := new(TssStakingSlashingInitialized)
	if err := _TssStakingSlashing.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TssStakingSlashingOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the TssStakingSlashing contract.
type TssStakingSlashingOwnershipTransferredIterator struct {
	Event *TssStakingSlashingOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TssStakingSlashingOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TssStakingSlashingOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TssStakingSlashingOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TssStakingSlashingOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TssStakingSlashingOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TssStakingSlashingOwnershipTransferred represents a OwnershipTransferred event raised by the TssStakingSlashing contract.
type TssStakingSlashingOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TssStakingSlashing *TssStakingSlashingFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TssStakingSlashingOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TssStakingSlashing.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingOwnershipTransferredIterator{contract: _TssStakingSlashing.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TssStakingSlashing *TssStakingSlashingFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TssStakingSlashingOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TssStakingSlashing.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TssStakingSlashingOwnershipTransferred)
				if err := _TssStakingSlashing.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TssStakingSlashing *TssStakingSlashingFilterer) ParseOwnershipTransferred(log types.Log) (*TssStakingSlashingOwnershipTransferred, error) {
	event := new(TssStakingSlashingOwnershipTransferred)
	if err := _TssStakingSlashing.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TssStakingSlashingSlashingIterator is returned from FilterSlashing and is used to iterate over the raw logs and unpacked data for Slashing events raised by the TssStakingSlashing contract.
type TssStakingSlashingSlashingIterator struct {
	Event *TssStakingSlashingSlashing // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TssStakingSlashingSlashingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TssStakingSlashingSlashing)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TssStakingSlashingSlashing)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TssStakingSlashingSlashingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TssStakingSlashingSlashingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TssStakingSlashingSlashing represents a Slashing event raised by the TssStakingSlashing contract.
type TssStakingSlashingSlashing struct {
	Arg0 common.Address
	Arg1 uint8
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterSlashing is a free log retrieval operation binding the contract event 0x9453459a6e9fa2069f1490c99cec15646afa157300f218a7f7840b23d09dbd3e.
//
// Solidity: event Slashing(address arg0, uint8 arg1)
func (_TssStakingSlashing *TssStakingSlashingFilterer) FilterSlashing(opts *bind.FilterOpts) (*TssStakingSlashingSlashingIterator, error) {

	logs, sub, err := _TssStakingSlashing.contract.FilterLogs(opts, "Slashing")
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingSlashingIterator{contract: _TssStakingSlashing.contract, event: "Slashing", logs: logs, sub: sub}, nil
}

// WatchSlashing is a free log subscription operation binding the contract event 0x9453459a6e9fa2069f1490c99cec15646afa157300f218a7f7840b23d09dbd3e.
//
// Solidity: event Slashing(address arg0, uint8 arg1)
func (_TssStakingSlashing *TssStakingSlashingFilterer) WatchSlashing(opts *bind.WatchOpts, sink chan<- *TssStakingSlashingSlashing) (event.Subscription, error) {

	logs, sub, err := _TssStakingSlashing.contract.WatchLogs(opts, "Slashing")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TssStakingSlashingSlashing)
				if err := _TssStakingSlashing.contract.UnpackLog(event, "Slashing", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashing is a log parse operation binding the contract event 0x9453459a6e9fa2069f1490c99cec15646afa157300f218a7f7840b23d09dbd3e.
//
// Solidity: event Slashing(address arg0, uint8 arg1)
func (_TssStakingSlashing *TssStakingSlashingFilterer) ParseSlashing(log types.Log) (*TssStakingSlashingSlashing, error) {
	event := new(TssStakingSlashingSlashing)
	if err := _TssStakingSlashing.contract.UnpackLog(event, "Slashing", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TssStakingSlashingWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the TssStakingSlashing contract.
type TssStakingSlashingWithdrawIterator struct {
	Event *TssStakingSlashingWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TssStakingSlashingWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TssStakingSlashingWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TssStakingSlashingWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TssStakingSlashingWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TssStakingSlashingWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TssStakingSlashingWithdraw represents a Withdraw event raised by the TssStakingSlashing contract.
type TssStakingSlashingWithdraw struct {
	Arg0 common.Address
	Arg1 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address arg0, uint256 arg1)
func (_TssStakingSlashing *TssStakingSlashingFilterer) FilterWithdraw(opts *bind.FilterOpts) (*TssStakingSlashingWithdrawIterator, error) {

	logs, sub, err := _TssStakingSlashing.contract.FilterLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingWithdrawIterator{contract: _TssStakingSlashing.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address arg0, uint256 arg1)
func (_TssStakingSlashing *TssStakingSlashingFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *TssStakingSlashingWithdraw) (event.Subscription, error) {

	logs, sub, err := _TssStakingSlashing.contract.WatchLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TssStakingSlashingWithdraw)
				if err := _TssStakingSlashing.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address arg0, uint256 arg1)
func (_TssStakingSlashing *TssStakingSlashingFilterer) ParseWithdraw(log types.Log) (*TssStakingSlashingWithdraw, error) {
	event := new(TssStakingSlashingWithdraw)
	if err := _TssStakingSlashing.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
