{
  "abi": [
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "toTaskNumber",
          "type": "uint32"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "commitPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositFutureFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "getAmount1",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "getAmount2",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "getChallengeStatus",
      "outputs": [
        {
          "internalType": "enum IPaymentManager.ChallengeStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "getDiff",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "getFromTaskNumber",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPaymentCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "getToTaskNumber",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "amount1",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "amount2",
          "type": "uint96"
        }
      ],
      "name": "initPaymentChallenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "payFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentFraudproofCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentFraudproofInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "secondHalf",
          "type": "bool"
        },
        {
          "internalType": "uint96",
          "name": "amount1",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "amount2",
          "type": "uint96"
        }
      ],
      "name": "performChallengeBisectionStep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repository",
      "outputs": [
        {
          "internalType": "contract IRepository",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "resolveChallenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "nonSignerIndex",
          "type": "uint48"
        },
        {
          "internalType": "bytes32[]",
          "name": "nonSignerPubkeyHashes",
          "type": "bytes32[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "signedStakeFirstQuorum",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "signedStakeSecondQuorum",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPaymentManager.TotalStakes",
          "name": "totalStakes",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "headerHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint32",
                  "name": "durationDataStoreId",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "globalDataStoreId",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "blockNumber",
                  "type": "uint32"
                },
                {
                  "internalType": "uint96",
                  "name": "fee",
                  "type": "uint96"
                },
                {
                  "internalType": "address",
                  "name": "confirmer",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "signatoryRecordHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IDataLayrServiceManager.DataStoreMetadata",
              "name": "metadata",
              "type": "tuple"
            },
            {
              "internalType": "uint8",
              "name": "duration",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "index",
              "type": "uint32"
            }
          ],
          "internalType": "struct IDataLayrServiceManager.DataStoreSearchData",
          "name": "searchData",
          "type": "tuple"
        }
      ],
      "name": "respondToPaymentChallengeFinal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "allowed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_paymentFraudproofCollateral",
          "type": "uint256"
        }
      ],
      "name": "setPaymentFraudproofCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "collateralToken()": "b2016bd4",
    "commitPayment(uint32,uint96)": "f546a5a9",
    "depositFutureFees(address,uint256)": "66d97307",
    "getAmount1(address)": "ed29912d",
    "getAmount2(address)": "3eb07bed",
    "getChallengeStatus(address)": "2ce9f4ca",
    "getDiff(address)": "f98485cd",
    "getFromTaskNumber(address)": "8de0cc3b",
    "getPaymentCollateral(address)": "f7c3815c",
    "getToTaskNumber(address)": "2fae414f",
    "initPaymentChallenge(address,uint96,uint96)": "610c066f",
    "payFee(address,address,uint256)": "0adfcd81",
    "paymentFraudproofCollateral()": "97fa5ce9",
    "paymentFraudproofInterval()": "637bcb57",
    "paymentToken()": "3013ce29",
    "performChallengeBisectionStep(address,bool,uint96,uint96)": "9d3ec23a",
    "redeemPayment()": "89f3cfd1",
    "repository()": "e9176c60",
    "resolveChallenge(address)": "32064dac",
    "respondToPaymentChallengeFinal(address,uint256,uint48,bytes32[],(uint256,uint256),((bytes32,uint32,uint32,uint32,uint96,address,bytes32),uint8,uint256,uint32))": "1f69f1c5",
    "setAllowance(address,uint256)": "310ec4a7",
    "setPaymentFraudproofCollateral(uint256)": "c1db1680"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"toTaskNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"commitPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFutureFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getAmount1\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getAmount2\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getChallengeStatus\",\"outputs\":[{\"internalType\":\"enum IPaymentManager.ChallengeStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getDiff\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getFromTaskNumber\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPaymentCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getToTaskNumber\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount1\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"amount2\",\"type\":\"uint96\"}],\"name\":\"initPaymentChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"payFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentFraudproofCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentFraudproofInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"secondHalf\",\"type\":\"bool\"},{\"internalType\":\"uint96\",\"name\":\"amount1\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"amount2\",\"type\":\"uint96\"}],\"name\":\"performChallengeBisectionStep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repository\",\"outputs\":[{\"internalType\":\"contract IRepository\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"resolveChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"nonSignerIndex\",\"type\":\"uint48\"},{\"internalType\":\"bytes32[]\",\"name\":\"nonSignerPubkeyHashes\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"signedStakeFirstQuorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signedStakeSecondQuorum\",\"type\":\"uint256\"}],\"internalType\":\"struct IPaymentManager.TotalStakes\",\"name\":\"totalStakes\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"headerHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"durationDataStoreId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"globalDataStoreId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"confirmer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"signatoryRecordHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IDataLayrServiceManager.DataStoreMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"duration\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct IDataLayrServiceManager.DataStoreSearchData\",\"name\":\"searchData\",\"type\":\"tuple\"}],\"name\":\"respondToPaymentChallengeFinal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_paymentFraudproofCollateral\",\"type\":\"uint256\"}],\"name\":\"setPaymentFraudproofCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Layr Labs, Inc.\",\"kind\":\"dev\",\"methods\":{\"commitPayment(uint32,uint96)\":{\"details\":\"Once this payment is recorded, a fraud proof period commences during which a challenger can dispute the proposed payment.\"},\"depositFutureFees(address,uint256)\":{\"params\":{\"amount\":\"is amount of futures fees being deposited\",\"onBehalfOf\":\"could be the `msg.sender` themselves, or a different address for whom `msg.sender` is depositing these future fees\"}},\"initPaymentChallenge(address,uint96,uint96)\":{\"params\":{\"amount1\":\"is the reward amount the challenger in that round claims is for the first half of tasks\",\"amount2\":\"is the reward amount the challenger in that round claims is for the second half of tasks\",\"operator\":\"is the operator against whose payment claim the fraudproof is being made\"}},\"performChallengeBisectionStep(address,bool,uint96,uint96)\":{\"params\":{\"amount1\":\"The amount that the caller asserts the operator is entitled to, for the first half *of the challenged half* of the previous bisection.\",\"amount2\":\"The amount that the caller asserts the operator is entitled to, for the second half *of the challenged half* of the previous bisection.\",\"operator\":\"The middleware operator who was challenged (used to look up challenge details)\",\"secondHalf\":\"If true, then the caller wishes to challenge the amount claimed as payment in the *second half* of the previous bisection step. If false then the *first half* is indicated instead.\"}},\"redeemPayment()\":{\"details\":\"This function can only be called after the challenge window for the payment claim has completed.\"},\"setPaymentFraudproofCollateral(uint256)\":{\"params\":{\"_paymentFraudproofCollateral\":\"The new value for `paymentFraudproofCollateral` to take.\"}}},\"title\":\"Minimal interface extension to `IPaymentManager`.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collateralToken()\":{\"notice\":\"Collateral token used for placing collateral on challenges & payment commits\"},\"commitPayment(uint32,uint96)\":{\"notice\":\"This is used by an operator to make a claim on the amount that they deserve for their service from their last payment until `toTaskNumber`\"},\"depositFutureFees(address,uint256)\":{\"notice\":\"deposit one-time fees by the `msg.sender` with this contract to pay for future tasks of this middleware\"},\"getAmount1(address)\":{\"notice\":\"Returns the 'amount1' for the `operator`'s payment claim.\"},\"getAmount2(address)\":{\"notice\":\"Returns the 'amount2' for the `operator`'s payment claim.\"},\"getChallengeStatus(address)\":{\"notice\":\"Returns the ChallengeStatus for the `operator`'s payment claim.\"},\"getDiff(address)\":{\"notice\":\"Returns the task number difference for the `operator`'s payment claim.\"},\"getFromTaskNumber(address)\":{\"notice\":\"Returns the 'fromTaskNumber' for the `operator`'s payment claim.\"},\"getPaymentCollateral(address)\":{\"notice\":\"Returns the active collateral of the `operator` placed on their payment claim.\"},\"getToTaskNumber(address)\":{\"notice\":\"Returns the 'toTaskNumber' for the `operator`'s payment claim.\"},\"initPaymentChallenge(address,uint96,uint96)\":{\"notice\":\"This function is called by a fraud prover to challenge a payment, initiating an interactive-type fraudproof.\"},\"payFee(address,address,uint256)\":{\"notice\":\"Used for deducting the fees from the payer to the middleware\"},\"paymentFraudproofCollateral()\":{\"notice\":\"Specifies the payment that has to be made as a collateral for fraudproof during payment challenges.\"},\"paymentFraudproofInterval()\":{\"notice\":\"Challenge window for submitting fraudproof in the case of an incorrect payment claim by a registered operator.\"},\"paymentToken()\":{\"notice\":\"the ERC20 token that will be used by the disperser to pay the service fees to middleware nodes.\"},\"performChallengeBisectionStep(address,bool,uint96,uint96)\":{\"notice\":\"Perform a single bisection step in an existing interactive payment challenge.\"},\"redeemPayment()\":{\"notice\":\"Called by an operator to redeem a payment that they previously 'committed' to by calling `commitPayment`.\"},\"resolveChallenge(address)\":{\"notice\":\"resolve an existing PaymentChallenge for an operator\"},\"respondToPaymentChallengeFinal(address,uint256,uint48,bytes32[],(uint256,uint256),((bytes32,uint32,uint32,uint32,uint96,address,bytes32),uint8,uint256,uint32))\":{\"notice\":\"Used to perform the final step in a payment challenge, in which the 'trueAmount' is determined and the winner of the challenge is decided. This function is called by a party after the other party has bisected the challenged payments to a difference of one, i.e., further bisection is not possible. Once the payments can no longer be bisected, the function resolves the challenge by determining who is wrong.\"},\"setAllowance(address,uint256)\":{\"notice\":\"Allows the `allowed` address to spend up to `amount` of the `msg.sender`'s funds that have been deposited in this contract\"},\"setPaymentFraudproofCollateral(uint256)\":{\"notice\":\"Modifies the `paymentFraudproofCollateral` amount.\"}},\"notice\":\"Adds a single DataLayr-specific function to the base interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"eignlayr-contracts/contracts/interfaces/IDataLayrPaymentManager.sol\":\"IDataLayrPaymentManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/=eignlayr-contracts/\",\":@openzeppelin-upgrades/=lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"eignlayr-contracts/contracts/interfaces/IDataLayrPaymentManager.sol\":{\"keccak256\":\"0xfeec6908770cbd28763084b44c316c0e401605d30b7079f2d1db3a8499783957\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://4e27428ddf0ac9d3a5c84462a9e4b76dca1af561036889c8656393f89d94f2be\",\"dweb:/ipfs/QmNx5ceQQpsCo8f2Qa1cgKwhaiivS3i6S2S4bEJqBMVHdQ\"]},\"eignlayr-contracts/contracts/interfaces/IDataLayrServiceManager.sol\":{\"keccak256\":\"0x6e9c5a450a2425534ac5863eca54326ae846ce53388d0e4633dd64a1d1bb8108\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://6d8f9cbcedef6d8226a5fb6591a92c672ca5efdf5476bb3fbc4b453b68d6e979\",\"dweb:/ipfs/Qme8vaubRu7nckvNZrsRaiQP33PHoFKZTTJT8HzLn3KHps\"]},\"eignlayr-contracts/contracts/interfaces/IDelegationTerms.sol\":{\"keccak256\":\"0x5e7db2c8e3cb2cf7d7a19f8f7be16efacfd1b709dfcd2f5bd2b32174812acc37\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://e4570f2eca5c5d3f0c09904326961b23a63814cf79c035929c040c652e4edbe2\",\"dweb:/ipfs/QmcSfznjU56j1B7kqy6zYQeYwjPND1GqLfUyth7EQHDQ9c\"]},\"eignlayr-contracts/contracts/interfaces/IEigenLayrDelegation.sol\":{\"keccak256\":\"0xd155bcd62c3c7a2a01eb57a729ef62fd817f968a8bc322e7e5b47a3008bf84ad\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://49572554bdb92998c8c6a81ec338fa605d8af52fb3326c6597c609b0d25fd9b5\",\"dweb:/ipfs/QmXQE7prGTepct57bYHjZh2iWifR7EMc5rrgoednCMfyq4\"]},\"eignlayr-contracts/contracts/interfaces/IInvestmentStrategy.sol\":{\"keccak256\":\"0x69eb667cc856ee1fe783243b6db21a43a9dadd29bf6761727b334fca4366bceb\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://224e8f6def4e53a1065f0c4ce26d8ffff15276944e2351753065aeb5bd265f52\",\"dweb:/ipfs/QmSu8iUPCnwza4SdE5jVSZLnQjMRXJg3VAGc8pHqbaMLob\"]},\"eignlayr-contracts/contracts/interfaces/IPaymentManager.sol\":{\"keccak256\":\"0xcfc3e77f3fee87f0563f2b9d510b7bd86d40bd79b0c03cb3ff2a0de95ab3edca\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://76afee317212097e73b744a38fc40090ca7632ca3fe90e81644db2ea5276577e\",\"dweb:/ipfs/QmPNwi2eSJtwEDK9imqCDCGyqLABiqMxhvTunjhruXh3jF\"]},\"eignlayr-contracts/contracts/interfaces/IRegistry.sol\":{\"keccak256\":\"0x5bd8be0f70b0e69f94e069c52417079ba2b9e73acd5f659c09b22142dc6c59f5\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://e32791f0147f40738d8a27c86e83c2207d5c1d1654c2f730629b3be587963cc4\",\"dweb:/ipfs/Qma4VYzA9jkLxWQCgCFm911rQodoSboaJxnNqi4AaSzftp\"]},\"eignlayr-contracts/contracts/interfaces/IRepository.sol\":{\"keccak256\":\"0x9c1f6f909a88a8d580617e260c3d7dc7aa4a8e98b7c6ca9ea0e662f9cf7b2f6b\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://f1e4be1bd82e94d8acb04f17ca140092e026cca506f0077532e01e4af4c0f1e4\",\"dweb:/ipfs/QmbDKszHE1fr7rFLzFZ7REewAoGVqCZf1SEMFHQKAQzgz8\"]},\"eignlayr-contracts/contracts/interfaces/IRepositoryAccess.sol\":{\"keccak256\":\"0x9d514d7faa77ef3ffba1c446db5542d4fad0287575e7f7bcf9337b1fc268fc6d\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://0427bea986798eca66fb43b59692772901b64d7d63bb4bc09f03068334471547\",\"dweb:/ipfs/QmW2ACnKkJxQJRDQ7YkbZQJhwr7ScorjFGB7S9si5w8D5Z\"]},\"eignlayr-contracts/contracts/interfaces/IServiceManager.sol\":{\"keccak256\":\"0x341ebf04eb799f695ce411087538ea8678268d58819b2640c73d01a0f245258f\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://aa3215133afda1dcc29148c3772472d7ea1bb982896ee58d0485ace965bf2427\",\"dweb:/ipfs/QmPkquzv7UzNVgMNeppaVZkxjSv3yAENDu11ZFWbMh4x8T\"]},\"eignlayr-contracts/contracts/interfaces/IVoteWeigher.sol\":{\"keccak256\":\"0x4d8068106dc1bc924e15cb4f8ae1c2f1b86bd3c6de1ce947081774225da63ad0\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://b252272b18e9a9480568a2f96cbf17e41d7d61e42e30edaef9633ca4e7149fef\",\"dweb:/ipfs/QmSh9uPEpkT4QbT83vHgXuXCE8DhJpCZh1typa97tD4zZ4\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.17+commit.8df45f5f"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "collateralToken",
          "outputs": [
            {
              "internalType": "contract IERC20",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "toTaskNumber",
              "type": "uint32"
            },
            {
              "internalType": "uint96",
              "name": "amount",
              "type": "uint96"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "commitPayment"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "onBehalfOf",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "depositFutureFees"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getAmount1",
          "outputs": [
            {
              "internalType": "uint96",
              "name": "",
              "type": "uint96"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getAmount2",
          "outputs": [
            {
              "internalType": "uint96",
              "name": "",
              "type": "uint96"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getChallengeStatus",
          "outputs": [
            {
              "internalType": "enum IPaymentManager.ChallengeStatus",
              "name": "",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getDiff",
          "outputs": [
            {
              "internalType": "uint48",
              "name": "",
              "type": "uint48"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getFromTaskNumber",
          "outputs": [
            {
              "internalType": "uint48",
              "name": "",
              "type": "uint48"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getPaymentCollateral",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getToTaskNumber",
          "outputs": [
            {
              "internalType": "uint48",
              "name": "",
              "type": "uint48"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "amount1",
              "type": "uint96"
            },
            {
              "internalType": "uint96",
              "name": "amount2",
              "type": "uint96"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initPaymentChallenge"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "initiator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "feeAmount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "payFee"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "paymentFraudproofCollateral",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "paymentFraudproofInterval",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "paymentToken",
          "outputs": [
            {
              "internalType": "contract IERC20",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "secondHalf",
              "type": "bool"
            },
            {
              "internalType": "uint96",
              "name": "amount1",
              "type": "uint96"
            },
            {
              "internalType": "uint96",
              "name": "amount2",
              "type": "uint96"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "performChallengeBisectionStep"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "redeemPayment"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "repository",
          "outputs": [
            {
              "internalType": "contract IRepository",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "resolveChallenge"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stakeIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint48",
              "name": "nonSignerIndex",
              "type": "uint48"
            },
            {
              "internalType": "bytes32[]",
              "name": "nonSignerPubkeyHashes",
              "type": "bytes32[]"
            },
            {
              "internalType": "struct IPaymentManager.TotalStakes",
              "name": "totalStakes",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "signedStakeFirstQuorum",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "signedStakeSecondQuorum",
                  "type": "uint256"
                }
              ]
            },
            {
              "internalType": "struct IDataLayrServiceManager.DataStoreSearchData",
              "name": "searchData",
              "type": "tuple",
              "components": [
                {
                  "internalType": "struct IDataLayrServiceManager.DataStoreMetadata",
                  "name": "metadata",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "headerHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "durationDataStoreId",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "globalDataStoreId",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "blockNumber",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint96",
                      "name": "fee",
                      "type": "uint96"
                    },
                    {
                      "internalType": "address",
                      "name": "confirmer",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "signatoryRecordHash",
                      "type": "bytes32"
                    }
                  ]
                },
                {
                  "internalType": "uint8",
                  "name": "duration",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "index",
                  "type": "uint32"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "respondToPaymentChallengeFinal"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "allowed",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setAllowance"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_paymentFraudproofCollateral",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setPaymentFraudproofCollateral"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "commitPayment(uint32,uint96)": {
            "details": "Once this payment is recorded, a fraud proof period commences during which a challenger can dispute the proposed payment."
          },
          "depositFutureFees(address,uint256)": {
            "params": {
              "amount": "is amount of futures fees being deposited",
              "onBehalfOf": "could be the `msg.sender` themselves, or a different address for whom `msg.sender` is depositing these future fees"
            }
          },
          "initPaymentChallenge(address,uint96,uint96)": {
            "params": {
              "amount1": "is the reward amount the challenger in that round claims is for the first half of tasks",
              "amount2": "is the reward amount the challenger in that round claims is for the second half of tasks",
              "operator": "is the operator against whose payment claim the fraudproof is being made"
            }
          },
          "performChallengeBisectionStep(address,bool,uint96,uint96)": {
            "params": {
              "amount1": "The amount that the caller asserts the operator is entitled to, for the first half *of the challenged half* of the previous bisection.",
              "amount2": "The amount that the caller asserts the operator is entitled to, for the second half *of the challenged half* of the previous bisection.",
              "operator": "The middleware operator who was challenged (used to look up challenge details)",
              "secondHalf": "If true, then the caller wishes to challenge the amount claimed as payment in the *second half* of the previous bisection step. If false then the *first half* is indicated instead."
            }
          },
          "redeemPayment()": {
            "details": "This function can only be called after the challenge window for the payment claim has completed."
          },
          "setPaymentFraudproofCollateral(uint256)": {
            "params": {
              "_paymentFraudproofCollateral": "The new value for `paymentFraudproofCollateral` to take."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "collateralToken()": {
            "notice": "Collateral token used for placing collateral on challenges & payment commits"
          },
          "commitPayment(uint32,uint96)": {
            "notice": "This is used by an operator to make a claim on the amount that they deserve for their service from their last payment until `toTaskNumber`"
          },
          "depositFutureFees(address,uint256)": {
            "notice": "deposit one-time fees by the `msg.sender` with this contract to pay for future tasks of this middleware"
          },
          "getAmount1(address)": {
            "notice": "Returns the 'amount1' for the `operator`'s payment claim."
          },
          "getAmount2(address)": {
            "notice": "Returns the 'amount2' for the `operator`'s payment claim."
          },
          "getChallengeStatus(address)": {
            "notice": "Returns the ChallengeStatus for the `operator`'s payment claim."
          },
          "getDiff(address)": {
            "notice": "Returns the task number difference for the `operator`'s payment claim."
          },
          "getFromTaskNumber(address)": {
            "notice": "Returns the 'fromTaskNumber' for the `operator`'s payment claim."
          },
          "getPaymentCollateral(address)": {
            "notice": "Returns the active collateral of the `operator` placed on their payment claim."
          },
          "getToTaskNumber(address)": {
            "notice": "Returns the 'toTaskNumber' for the `operator`'s payment claim."
          },
          "initPaymentChallenge(address,uint96,uint96)": {
            "notice": "This function is called by a fraud prover to challenge a payment, initiating an interactive-type fraudproof."
          },
          "payFee(address,address,uint256)": {
            "notice": "Used for deducting the fees from the payer to the middleware"
          },
          "paymentFraudproofCollateral()": {
            "notice": "Specifies the payment that has to be made as a collateral for fraudproof during payment challenges."
          },
          "paymentFraudproofInterval()": {
            "notice": "Challenge window for submitting fraudproof in the case of an incorrect payment claim by a registered operator."
          },
          "paymentToken()": {
            "notice": "the ERC20 token that will be used by the disperser to pay the service fees to middleware nodes."
          },
          "performChallengeBisectionStep(address,bool,uint96,uint96)": {
            "notice": "Perform a single bisection step in an existing interactive payment challenge."
          },
          "redeemPayment()": {
            "notice": "Called by an operator to redeem a payment that they previously 'committed' to by calling `commitPayment`."
          },
          "resolveChallenge(address)": {
            "notice": "resolve an existing PaymentChallenge for an operator"
          },
          "respondToPaymentChallengeFinal(address,uint256,uint48,bytes32[],(uint256,uint256),((bytes32,uint32,uint32,uint32,uint96,address,bytes32),uint8,uint256,uint32))": {
            "notice": "Used to perform the final step in a payment challenge, in which the 'trueAmount' is determined and the winner of the challenge is decided. This function is called by a party after the other party has bisected the challenged payments to a difference of one, i.e., further bisection is not possible. Once the payments can no longer be bisected, the function resolves the challenge by determining who is wrong."
          },
          "setAllowance(address,uint256)": {
            "notice": "Allows the `allowed` address to spend up to `amount` of the `msg.sender`'s funds that have been deposited in this contract"
          },
          "setPaymentFraudproofCollateral(uint256)": {
            "notice": "Modifies the `paymentFraudproofCollateral` amount."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@eigenlayer/=eignlayr-contracts/",
        ":@openzeppelin-upgrades/=lib/openzeppelin-contracts-upgradeable/",
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "eignlayr-contracts/contracts/interfaces/IDataLayrPaymentManager.sol": "IDataLayrPaymentManager"
      },
      "libraries": {}
    },
    "sources": {
      "eignlayr-contracts/contracts/interfaces/IDataLayrPaymentManager.sol": {
        "keccak256": "0xfeec6908770cbd28763084b44c316c0e401605d30b7079f2d1db3a8499783957",
        "urls": [
          "bzz-raw://4e27428ddf0ac9d3a5c84462a9e4b76dca1af561036889c8656393f89d94f2be",
          "dweb:/ipfs/QmNx5ceQQpsCo8f2Qa1cgKwhaiivS3i6S2S4bEJqBMVHdQ"
        ],
        "license": "UNLICENSED"
      },
      "eignlayr-contracts/contracts/interfaces/IDataLayrServiceManager.sol": {
        "keccak256": "0x6e9c5a450a2425534ac5863eca54326ae846ce53388d0e4633dd64a1d1bb8108",
        "urls": [
          "bzz-raw://6d8f9cbcedef6d8226a5fb6591a92c672ca5efdf5476bb3fbc4b453b68d6e979",
          "dweb:/ipfs/Qme8vaubRu7nckvNZrsRaiQP33PHoFKZTTJT8HzLn3KHps"
        ],
        "license": "UNLICENSED"
      },
      "eignlayr-contracts/contracts/interfaces/IDelegationTerms.sol": {
        "keccak256": "0x5e7db2c8e3cb2cf7d7a19f8f7be16efacfd1b709dfcd2f5bd2b32174812acc37",
        "urls": [
          "bzz-raw://e4570f2eca5c5d3f0c09904326961b23a63814cf79c035929c040c652e4edbe2",
          "dweb:/ipfs/QmcSfznjU56j1B7kqy6zYQeYwjPND1GqLfUyth7EQHDQ9c"
        ],
        "license": "UNLICENSED"
      },
      "eignlayr-contracts/contracts/interfaces/IEigenLayrDelegation.sol": {
        "keccak256": "0xd155bcd62c3c7a2a01eb57a729ef62fd817f968a8bc322e7e5b47a3008bf84ad",
        "urls": [
          "bzz-raw://49572554bdb92998c8c6a81ec338fa605d8af52fb3326c6597c609b0d25fd9b5",
          "dweb:/ipfs/QmXQE7prGTepct57bYHjZh2iWifR7EMc5rrgoednCMfyq4"
        ],
        "license": "UNLICENSED"
      },
      "eignlayr-contracts/contracts/interfaces/IInvestmentStrategy.sol": {
        "keccak256": "0x69eb667cc856ee1fe783243b6db21a43a9dadd29bf6761727b334fca4366bceb",
        "urls": [
          "bzz-raw://224e8f6def4e53a1065f0c4ce26d8ffff15276944e2351753065aeb5bd265f52",
          "dweb:/ipfs/QmSu8iUPCnwza4SdE5jVSZLnQjMRXJg3VAGc8pHqbaMLob"
        ],
        "license": "UNLICENSED"
      },
      "eignlayr-contracts/contracts/interfaces/IPaymentManager.sol": {
        "keccak256": "0xcfc3e77f3fee87f0563f2b9d510b7bd86d40bd79b0c03cb3ff2a0de95ab3edca",
        "urls": [
          "bzz-raw://76afee317212097e73b744a38fc40090ca7632ca3fe90e81644db2ea5276577e",
          "dweb:/ipfs/QmPNwi2eSJtwEDK9imqCDCGyqLABiqMxhvTunjhruXh3jF"
        ],
        "license": "UNLICENSED"
      },
      "eignlayr-contracts/contracts/interfaces/IRegistry.sol": {
        "keccak256": "0x5bd8be0f70b0e69f94e069c52417079ba2b9e73acd5f659c09b22142dc6c59f5",
        "urls": [
          "bzz-raw://e32791f0147f40738d8a27c86e83c2207d5c1d1654c2f730629b3be587963cc4",
          "dweb:/ipfs/Qma4VYzA9jkLxWQCgCFm911rQodoSboaJxnNqi4AaSzftp"
        ],
        "license": "UNLICENSED"
      },
      "eignlayr-contracts/contracts/interfaces/IRepository.sol": {
        "keccak256": "0x9c1f6f909a88a8d580617e260c3d7dc7aa4a8e98b7c6ca9ea0e662f9cf7b2f6b",
        "urls": [
          "bzz-raw://f1e4be1bd82e94d8acb04f17ca140092e026cca506f0077532e01e4af4c0f1e4",
          "dweb:/ipfs/QmbDKszHE1fr7rFLzFZ7REewAoGVqCZf1SEMFHQKAQzgz8"
        ],
        "license": "UNLICENSED"
      },
      "eignlayr-contracts/contracts/interfaces/IRepositoryAccess.sol": {
        "keccak256": "0x9d514d7faa77ef3ffba1c446db5542d4fad0287575e7f7bcf9337b1fc268fc6d",
        "urls": [
          "bzz-raw://0427bea986798eca66fb43b59692772901b64d7d63bb4bc09f03068334471547",
          "dweb:/ipfs/QmW2ACnKkJxQJRDQ7YkbZQJhwr7ScorjFGB7S9si5w8D5Z"
        ],
        "license": "UNLICENSED"
      },
      "eignlayr-contracts/contracts/interfaces/IServiceManager.sol": {
        "keccak256": "0x341ebf04eb799f695ce411087538ea8678268d58819b2640c73d01a0f245258f",
        "urls": [
          "bzz-raw://aa3215133afda1dcc29148c3772472d7ea1bb982896ee58d0485ace965bf2427",
          "dweb:/ipfs/QmPkquzv7UzNVgMNeppaVZkxjSv3yAENDu11ZFWbMh4x8T"
        ],
        "license": "UNLICENSED"
      },
      "eignlayr-contracts/contracts/interfaces/IVoteWeigher.sol": {
        "keccak256": "0x4d8068106dc1bc924e15cb4f8ae1c2f1b86bd3c6de1ce947081774225da63ad0",
        "urls": [
          "bzz-raw://b252272b18e9a9480568a2f96cbf17e41d7d61e42e30edaef9633ca4e7149fef",
          "dweb:/ipfs/QmSh9uPEpkT4QbT83vHgXuXCE8DhJpCZh1typa97tD4zZ4"
        ],
        "license": "UNLICENSED"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
        "urls": [
          "bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
          "dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "eignlayr-contracts/contracts/interfaces/IDataLayrPaymentManager.sol",
    "id": 27,
    "exportedSymbols": {
      "IDataLayrPaymentManager": [
        26
      ],
      "IDataLayrServiceManager": [
        196
      ],
      "IDelegationTerms": [
        233
      ],
      "IERC20": [
        2773
      ],
      "IEigenLayrDelegation": [
        361
      ],
      "IInvestmentStrategy": [
        455
      ],
      "IPaymentManager": [
        674
      ],
      "IRegistry": [
        686
      ],
      "IRepository": [
        720
      ],
      "IRepositoryAccess": [
        731
      ],
      "IServiceManager": [
        787
      ],
      "IVoteWeigher": [
        815
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:1086:0",
    "nodes": [
      {
        "id": 1,
        "nodeType": "PragmaDirective",
        "src": "39:23:0",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".9"
        ]
      },
      {
        "id": 2,
        "nodeType": "ImportDirective",
        "src": "64:31:0",
        "nodes": [],
        "absolutePath": "eignlayr-contracts/contracts/interfaces/IPaymentManager.sol",
        "file": "./IPaymentManager.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 27,
        "sourceUnit": 675,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 3,
        "nodeType": "ImportDirective",
        "src": "96:39:0",
        "nodes": [],
        "absolutePath": "eignlayr-contracts/contracts/interfaces/IDataLayrServiceManager.sol",
        "file": "./IDataLayrServiceManager.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 27,
        "sourceUnit": 197,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 26,
        "nodeType": "ContractDefinition",
        "src": "307:817:0",
        "nodes": [
          {
            "id": 25,
            "nodeType": "FunctionDefinition",
            "src": "819:303:0",
            "nodes": [],
            "documentation": {
              "id": 7,
              "nodeType": "StructuredDocumentation",
              "src": "366:448:0",
              "text": " @notice Used to perform the final step in a payment challenge, in which the 'trueAmount' is determined and the winner of the challenge is decided.\n This function is called by a party after the other party has bisected the challenged payments to a difference of one, i.e., further bisection\n is not possible. Once the payments can no longer be bisected, the function resolves the challenge by determining who is wrong."
            },
            "functionSelector": "1f69f1c5",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "respondToPaymentChallengeFinal",
            "nameLocation": "828:30:0",
            "parameters": {
              "id": 23,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "876:8:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 25,
                  "src": "868:16:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 8,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "868:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 11,
                  "mutability": "mutable",
                  "name": "stakeIndex",
                  "nameLocation": "902:10:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 25,
                  "src": "894:18:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "894:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13,
                  "mutability": "mutable",
                  "name": "nonSignerIndex",
                  "nameLocation": "929:14:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 25,
                  "src": "922:21:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint48",
                    "typeString": "uint48"
                  },
                  "typeName": {
                    "id": 12,
                    "name": "uint48",
                    "nodeType": "ElementaryTypeName",
                    "src": "922:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint48",
                      "typeString": "uint48"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 16,
                  "mutability": "mutable",
                  "name": "nonSignerPubkeyHashes",
                  "nameLocation": "970:21:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 25,
                  "src": "953:38:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 14,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "953:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 15,
                    "nodeType": "ArrayTypeName",
                    "src": "953:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 19,
                  "mutability": "mutable",
                  "name": "totalStakes",
                  "nameLocation": "1022:11:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 25,
                  "src": "1001:32:0",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_TotalStakes_$518_calldata_ptr",
                    "typeString": "struct IPaymentManager.TotalStakes"
                  },
                  "typeName": {
                    "id": 18,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 17,
                      "name": "TotalStakes",
                      "nameLocations": [
                        "1001:11:0"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 518,
                      "src": "1001:11:0"
                    },
                    "referencedDeclaration": 518,
                    "src": "1001:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TotalStakes_$518_storage_ptr",
                      "typeString": "struct IPaymentManager.TotalStakes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 22,
                  "mutability": "mutable",
                  "name": "searchData",
                  "nameLocation": "1096:10:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 25,
                  "src": "1043:63:0",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_DataStoreSearchData_$59_calldata_ptr",
                    "typeString": "struct IDataLayrServiceManager.DataStoreSearchData"
                  },
                  "typeName": {
                    "id": 21,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 20,
                      "name": "IDataLayrServiceManager.DataStoreSearchData",
                      "nameLocations": [
                        "1043:23:0",
                        "1067:19:0"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 59,
                      "src": "1043:43:0"
                    },
                    "referencedDeclaration": 59,
                    "src": "1043:43:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_DataStoreSearchData_$59_storage_ptr",
                      "typeString": "struct IDataLayrServiceManager.DataStoreSearchData"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "858:254:0"
            },
            "returnParameters": {
              "id": 24,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1121:0:0"
            },
            "scope": 26,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 5,
              "name": "IPaymentManager",
              "nameLocations": [
                "344:15:0"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 674,
              "src": "344:15:0"
            },
            "id": 6,
            "nodeType": "InheritanceSpecifier",
            "src": "344:15:0"
          }
        ],
        "canonicalName": "IDataLayrPaymentManager",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 4,
          "nodeType": "StructuredDocumentation",
          "src": "137:169:0",
          "text": " @title Minimal interface extension to `IPaymentManager`.\n @author Layr Labs, Inc.\n @notice Adds a single DataLayr-specific function to the base interface."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          26,
          674,
          731
        ],
        "name": "IDataLayrPaymentManager",
        "nameLocation": "317:23:0",
        "scope": 27,
        "usedErrors": []
      }
    ],
    "license": "UNLICENSED"
  },
  "id": 0
}